#ui()
{
	.make-button(
		@font-size:    @button-font-size,
		@padding-ver:  @button-padding-ver,
		@paddong-hor:  @button-padding-hor,
		@border-width: @button-border-width,
		@pre:          @button-class-prefix)
	{
		#ui-button.template(@font-size, @padding-ver, @paddong-hor, @border-width);
		#ui-button.sizes(@font-size, @pre);


		.bright(@color)  { result: #ui.hover-bg(bright,  @color)[result]; }
		.dark(@color)    { result: #ui.hover-bg(dark,    @color)[result]; }
		.darken(@color)  { result: #ui.hover-bg(darken,  @color)[result]; }
		.light(@color)   { result: #ui.hover-bg(light,   @color)[result]; }
		.lighten(@color) { result: #ui.hover-bg(lighten, @color)[result]; }

		.font(@color, @hover: default, @active: hover)
		{
			@font-default-color: @color;
			@font-hover-color: #ui.hover-bg(@hover, @font-default-color)[result];

			@font-active-color: if(@active = default,
				@font-hover-color,
				if(iscolor(@active),
					@active,
					#ui.active-bg(@font-hover-color)[result]
				)
			);


			.font-colors()
			{
				default: @font-default-color;
				hover:   @font-hover-color;
				active:  @font-active-color;
			}
			.bg-colors(@x) when (default())
			{
				default: transparent;
				hover:   transparent;
				active:  transparent;
			}
			.border-colors(@x) when (default())
			{
				default: transparent;
				hover:   transparent;
				active:  transparent;
			}
		}
		.bg(@default: false, @hover: false, @active: hover)
		{
			@bg-default-color: if(iscolor(@default),
				@default,
				transparent
			);

			@bg-hover-color: if(@hover = false,
				transparent,
				if(iscolor(@hover),
					@hover,
					#ui.hover-bg(@hover, @bg-default-color)[result]
				)
			);

			@bg-active-color: if(@active = false,
				transparent,
				if(iscolor(@active),
					@active,
					#ui.active-bg(@bg-hover-color)[result]
				)
			);


			.bg-colors(@x) when (@x = 1)
			{
				default: @bg-default-color;
				hover:   @bg-hover-color;
				active:  @bg-active-color;
			}
		}
		.border(@default: false, @hover: -1, @active: -1)
		{
			@_hover:  if(@hover = -1, @default, @hover);
			@_active: if(@active = -1, @default, @active);

			@f-default-color: .font-colors()[default];
			@f-hover-color:   .font-colors()[hover];
			@f-active-color:  .font-colors()[active];

			@b-default-color: .bg-colors(1)[default];
			@b-hover-color:   .bg-colors(1)[hover];
			@b-active-color:  .bg-colors(1)[active];


			@border-default-color: if(@default = false,
				transparent,
				if(iscolor(@default),
					@default,
					if(@default = bg,
						@b-default-color,
						fade(@f-default-color, alpha(@f-default-color) / 2 * 100)
					)
				)
			);

			@border-hover-color: if(@_hover = false,
				transparent,
				if(iscolor(@_hover),
					@_hover,
					if(@_hover = bg,
						@b-hover-color,
						@f-hover-color
					)
				)
			);

			@border-active-color: if(@_active = false,
				transparent,
				if(iscolor(@_active),
					@_active,
					if(@_active = bg,
						@b-active-color,
						@f-active-color
					)
				)
			);


			.border-colors(@x) when (@x = 1)
			{
				default: @border-default-color;
				hover:   @border-hover-color;
				active:  @border-active-color;
			}
		}
		.apply()
		{
			@font-default: .font-colors()[default];
			@font-hover:   .font-colors()[hover];
			@font-active:  .font-colors()[active];

			@bg-default: .bg-colors(1)[default];
			@bg-hover:   .bg-colors(1)[hover];
			@bg-active:  .bg-colors(1)[active];

			@border-default: .border-colors(1)[default];
			@border-hover:   .border-colors(1)[hover];
			@border-active:  .border-colors(1)[active];


			&, &::before, &::after { color: @font-default; }
			border-color: @border-default;
			background-color: @bg-default;

			&:hover
			{
				&, &::before, &::after { color: @font-hover; }
				border-color: @border-hover;
				background-color: @bg-hover;
			}
			&:active, &.@{pre}active
			{
				&, &::before, &::after { color: @font-active; }
				border-color: @border-active;
				background-color: @bg-active;
			}
			&:disabled, &[disabled]
			{
				&, &::before, &::after { color: @font-default; }
				border-color: @border-default;
				background-color: @bg-default;
			}
		}


		.round()
		{
			&.@{pre}round
			{
				border-radius: 150px;
			}
		}
		.thin()
		{
			&.@{pre}thin
			{
				padding-left:  (@padding-ver * @button-line-height);
				padding-right: (@padding-ver * @button-line-height);
			}
		}
		.collapse()
		{
			&.@{pre}collapse
			{
				padding: 0;
				min-height: auto;
			}
		}
		.circle()
		{
			&.@{pre}circle
			{
				border-radius: 150px;
				padding-left:  @padding-ver;
				padding-right: @padding-ver;
			}
		}
		.loading()
		{
			&.@{pre}loading
			{
				pointer-events: none;
				color: transparent !important;

				&::after
				{
					content: '';
					display: table; // fix disproportions of width and height due to sub-pixel rounding bug
					position: absolute;
					z-index: 100;
					top:  50%;
					left: 50%;
					width:  auto;
					height: auto;
					width:  1.24em;
					height: 1.24em;
					margin-top:  -0.62em;
					margin-left: -0.62em;
					border-radius: 50%;
					border-width: 0.1837em;
					border-style: solid;
					border-color: currentColor transparent transparent currentColor;
					animation: rotateRight 1s infinite linear;

					.keyframes(rotateRight);
				}
			}
		}
	}


	.button(
		@bg-color:     rgba(255,255,255,0),
		@color:        @button-color,
		@hover:        @button-hover-color-bg,
		@font-size:    @button-font-size,
		@padding-ver:  @button-padding-ver,
		@paddong-hor:  @button-padding-hor,
		@border-width: @button-border-width,
		@pre:          @button-class-prefix)
	{
		@hover-bg-color:  #ui.hover-bg(@hover, @bg-color)[result];
		@active-bg-color: #ui.active-bg(@hover-bg-color)[result];

		#ui-button.template(@font-size, @padding-ver, @paddong-hor, @border-width);
		#ui-button.sizes(@font-size, @pre);

		&
		{
			&, &::before, &::after { color: @color; }
			background-color: @bg-color;
		}
		&:hover
		{
			background-color: @hover-bg-color;
		}
		&:active, &.@{pre}active
		{
			background-color: @active-bg-color;
		}
		&:disabled
		{
			&, &::before, &::after { color: @color !important; }
			background-color: @bg-color !important;
		}


		.round()
		{
			&.@{pre}round
			{
				border-radius: 150px;
			}
		}
		.thin()
		{
			&.@{pre}thin
			{
				padding-left:  (@padding-ver * @button-line-height);
				padding-right: (@padding-ver * @button-line-height);
			}
		}
		.collapse()
		{
			&.@{pre}collapse
			{
				padding: 0;
				min-height: auto;
			}
		}
		.circle()
		{
			&.@{pre}circle
			{
				border-radius: 150px;
				padding-left:  @padding-ver;
				padding-right: @padding-ver;
			}
		}
		.loading()
		{
			&.@{pre}loading
			{
				pointer-events: none;
				color: transparent !important;

				&::after
				{
					content: '';
					display: table; // fix disproportions of width and height due to sub-pixel rounding bug
					position: absolute;
					z-index: 100;
					top:  50%;
					left: 50%;
					width:  auto;
					height: auto;
					width:  1.24em;
					height: 1.24em;
					margin-top:  -0.62em;
					margin-left: -0.62em;
					border-radius: 50%;
					border-width: 0.1837em;
					border-style: solid;
					border-color: currentColor transparent transparent currentColor;
					animation: rotateRight 1s infinite linear;

					.keyframes(rotateRight);
				}
			}
		}


		.invert(@class: invert)
		{
			@hover-type: if(iscolor(@hover), if(iscolor(@button-hover-color-bg), default, @button-hover-color-bg), @hover);
			@hover-bg-color:  #ui.hover-bg(@hover-type, @color)[result];
			@active-bg-color: #ui.active-bg(@hover-bg-color)[result];

			&.@{pre}@{class}
			{
				&, &::before, &::after { color: @bg-color; }
				background-color: @color;

				&:hover
				{
					background-color: @hover-bg-color;
				}
				&:active, &.@{pre}active
				{
					background-color: @active-bg-color;
				}
				&:disabled
				{
					&, &::before, &::after { color: @bg-color !important; }
					background-color: @color !important;
				}
			}
		}


		.ghost(@class: ghost)
		{
			&.@{pre}@{class}
			{
				background-color: transparent;

				&:hover
				{
					background-color: @hover-bg-color;
				}
				&:active, &.@{pre}active
				{
					background-color: @active-bg-color;
				}
				&:disabled
				{
					background-color: transparent !important;
				}
			}
		}
		.ghost-line(@class: ghost-line)
		{
			&.@{pre}@{class}
			{
				@border-color: fade(@color, alpha(@color) / 2 * 100);

				border-color: @border-color;
				background-color: transparent;

				&:hover
				{
					border-color: transparent;
					background-color: @hover-bg-color;
				}
				&:active, &.@{pre}active
				{
					border-color: transparent;
					background-color: @active-bg-color;
				}
				&:disabled
				{
					border-color: @border-color !important;
					background-color: transparent !important;
				}
			}
		}

		.link(@class: link)
		{
			&.@{pre}@{class}
			{
				@hover-bg-color:  #ui.hover-bg(@hover, @color)[result];
				@active-bg-color: #ui.active-bg(@hover-bg-color)[result];

				&, &::before, &::after { color: @bg-color; }
				background-color: transparent;

				&:hover
				{
					background-color: @hover-bg-color;
				}
				&:active, &.@{pre}active
				{
					background-color: @active-bg-color;
				}
				&:disabled
				{
					&, &::before, &::after { color: @bg-color !important; }
					background-color: transparent !important;
				}
			}
		}
		.link-line(@class: link-line)
		{
			&.@{pre}@{class}
			{
				@border-color: fade(@bg-color, alpha(@bg-color) / 2 * 100);
				@hover-bg-color:  #ui.hover-bg(@hover, @color)[result];
				@active-bg-color: #ui.active-bg(@hover-bg-color)[result];

				&, &::before, &::after { color: @bg-color; }
				border-color: @border-color;
				background-color: transparent;

				&:hover
				{
					border-color: transparent;
					background-color: @hover-bg-color;
				}
				&:active, &.@{pre}active
				{
					border-color: transparent;
					background-color: @active-bg-color;
				}
				&:disabled
				{
					&, &::before, &::after { color: @bg-color !important; }
					border-color: @border-color !important;
					background-color: transparent !important;
				}
			}
		}


		.ghost--const(@class: ghost--const)
		{
			&.@{pre}@{class}
			{
				background-color: transparent;

				&:hover
				{
					background-color: transparent;
				}
				&:active, &.@{pre}active
				{
					&, &::before, &::after { color: #ui.hover-bg(@hover, @color)[result]; }
					background-color: transparent;
				}
				&:disabled
				{
					background-color: transparent !important;
				}
			}
		}
		.ghost-line--const(@class: ghost-line--const)
		{
			&.@{pre}@{class}
			{
				@border-color: fade(@color, alpha(@color) / 2 * 100);
				@hover-bg-color: #ui.hover-bg(@hover, @color)[result];

				border-color: @border-color;
				background-color: transparent;

				&:hover
				{
					background-color: transparent;
				}
				&:active, &.@{pre}active
				{
					&, &::before, &::after { color: @hover-bg-color; }
					border-color: @hover-bg-color;
					background-color: transparent;
				}
				&:disabled
				{
					border-color: @border-color !important;
					background-color: transparent !important;
				}
			}
		}
		.ghost--const-line(@class: ghost--const-line)
		{
			&.@{pre}@{class}
			{
				@hover-bg-color: #ui.hover-bg(@hover, @color)[result];

				background-color: transparent;

				&:hover
				{
					border-color: @color;
					background-color: transparent;
				}
				&:active, &.@{pre}active
				{
					&, &::before, &::after { color: @hover-bg-color; }
					border-color: @hover-bg-color;
					background-color: transparent;
				}
				&:disabled
				{
					background-color: transparent !important;
				}
			}
		}

		.link--const(@class: link--const)
		{
			&.@{pre}@{class}
			{
				&, &::before, &::after { color: @bg-color; }
				background-color: transparent;

				&:hover
				{
					background-color: transparent;
				}
				&:active, &.@{pre}active
				{
					&, &::before, &::after { color: @hover-bg-color; }
					border-color: @hover-bg-color;
					background-color: transparent;
				}
				&:disabled
				{
					&, &::before, &::after { color: @bg-color !important; }
					background-color: transparent !important;
				}
			}
		}
		.link-line--const(@class: link-line--const)
		{
			&.@{pre}@{class}
			{
				@border-color: fade(@bg-color, alpha(@bg-color) / 2 * 100);

				&, &::before, &::after { color: @bg-color; }
				border-color: @border-color;
				background-color: transparent;

				&:hover
				{
					background-color: transparent;
				}
				&:active, &.@{pre}active
				{
					&, &::before, &::after { color: @hover-bg-color; }
					border-color: @hover-bg-color;
					background-color: transparent;
				}
				&:disabled
				{
					&, &::before, &::after { color: @bg-color !important; }
					border-color: @border-color !important;
					background-color: transparent !important;
				}
			}
		}
		.link--const-line(@class: link--const-line)
		{
			&.@{pre}@{class}
			{
				&, &::before, &::after { color: @bg-color; }
				background-color: transparent;

				&:hover
				{
					border-color: @bg-color;
					background-color: transparent;
				}
				&:active, &.@{pre}active
				{
					&, &::before, &::after { color: @hover-bg-color; }
					border-color: @hover-bg-color;
					background-color: transparent;
				}
				&:disabled
				{
					&, &::before, &::after { color: @bg-color !important; }
					background-color: transparent !important;
				}
			}
		}


		.ghost--font(@class: ghost--font)
		{
			&.@{pre}@{class}
			{
				background-color: transparent;

				&:hover
				{
					&, &::before, &::after { color: @hover-bg-color; }
				}
				&:active, &.@{pre}active
				{
					&, &::before, &::after { color: @active-bg-color; }
				}
				&:disabled
				{
					background-color: transparent !important;
				}
			}
		}
		.ghost-line--font(@class: ghost-line--font)
		{
			&.@{pre}@{class}
			{
				@border-color: fade(@color, alpha(@color) / 2 * 100);

				border-color: @border-color;
				background-color: transparent;

				&:hover
				{
					&, &::before, &::after { color: @hover-bg-color; }
					border-color: @hover-bg-color;
				}
				&:active, &.@{pre}active
				{
					&, &::before, &::after { color: @active-bg-color; }
					border-color: @active-bg-color;
				}
				&:disabled
				{
					border-color: @border-color !important;
					background-color: transparent !important;
				}
			}
		}
		.ghost--font-line(@class: ghost--font-line)
		{
			&.@{pre}@{class}
			{
				background-color: transparent;

				&:hover
				{
					&, &::before, &::after { color: @hover-bg-color; }
					border-color: @hover-bg-color;
				}
				&:active, &.@{pre}active
				{
					&, &::before, &::after { color: @active-bg-color; }
					border-color: @active-bg-color;
				}
				&:disabled
				{
					border-color: transparent !important;
					background-color: transparent !important;
				}
			}
		}

		.link--font(@class: link--font)
		{
			&.@{pre}@{class}
			{
				@hover-bg-color:  #ui.hover-bg(@hover, @color)[result];
				@active-bg-color: #ui.active-bg(@hover-bg-color)[result];

				&, &::before, &::after { color: @bg-color; }
				background-color: transparent;

				&:hover
				{
					&, &::before, &::after { color: @hover-bg-color; }
				}
				&:active, &.@{pre}active
				{
					&, &::before, &::after { color: @active-bg-color; }
				}
				&:disabled
				{
					&, &::before, &::after { color: @bg-color !important; }
					background-color: transparent !important;
				}
			}
		}
		.link-line--font(@class: link-line--font)
		{
			&.@{pre}@{class}
			{
				@border-color: fade(@bg-color, alpha(@bg-color) / 2 * 100);
				@hover-bg-color:  #ui.hover-bg(@hover, @color)[result];
				@active-bg-color: #ui.active-bg(@hover-bg-color)[result];

				&, &::before, &::after { color: @bg-color; }
				border-color: @border-color;
				background-color: transparent;

				&:hover
				{
					&, &::before, &::after { color: @hover-bg-color; }
					border-color: @hover-bg-color;
				}
				&:active, &.@{pre}active
				{
					&, &::before, &::after { color: @active-bg-color; }
					border-color: @active-bg-color;
				}
				&:disabled
				{
					&, &::before, &::after { color: @bg-color !important; }
					border-color: @border-color !important;
					background-color: transparent !important;
				}
			}
		}
		.link--font-line(@class: link--font-line)
		{
			&.@{pre}@{class}
			{
				@hover-bg-color:  #ui.hover-bg(@hover, @color)[result];
				@active-bg-color: #ui.active-bg(@hover-bg-color)[result];

				&, &::before, &::after { color: @bg-color; }
				background-color: transparent;

				&:hover
				{
					&, &::before, &::after { color: @hover-bg-color; }
					border-color: @hover-bg-color;
				}
				&:active, &.@{pre}active
				{
					&, &::before, &::after { color: @active-bg-color; }
					border-color: @active-bg-color;
				}
				&:disabled
				{
					&, &::before, &::after { color: @bg-color !important; }
					border-color: transparent !important;
					background-color: transparent !important;
				}
			}
		}


		.ghost--bg(@class: ghost--bg)
		{
			&.@{pre}@{class}
			{
				@hover-bg-color:  #ui.hover-bg(@hover, @color)[result];
				@active-bg-color: #ui.active-bg(@hover-bg-color)[result];

				background-color: transparent;

				&:hover
				{
					&, &::before, &::after { color: @bg-color; }
					background-color: @hover-bg-color;
				}
				&:active, &.@{pre}active
				{
					&, &::before, &::after { color: @bg-color; }
					background-color: @active-bg-color;
				}
				&:disabled
				{
					background-color: transparent !important;
				}
			}
		}
		.ghost-line--bg(@class: ghost-line--bg)
		{
			&.@{pre}@{class}
			{
				@border-color: fade(@color, alpha(@color) / 2 * 100);
				@hover-bg-color:  #ui.hover-bg(@hover, @color)[result];
				@active-bg-color: #ui.active-bg(@hover-bg-color)[result];

				border-color: @border-color;
				background-color: transparent;

				&:hover
				{
					&, &::before, &::after { color: @bg-color; }
					border-color: transparent;
					background-color: @hover-bg-color;
				}
				&:active, &.@{pre}active
				{
					&, &::before, &::after { color: @bg-color; }
					border-color: transparent;
					background-color: @active-bg-color;
				}
				&:disabled
				{
					border-color: @border-color !important;
					background-color: transparent !important;
				}
			}
		}

		.link--bg(@class: link--bg)
		{
			&.@{pre}@{class}
			{
				&, &::before, &::after { color: @bg-color; }
				background-color: transparent;

				&:hover
				{
					&, &::before, &::after { color: @color; }
					background-color: @hover-bg-color;
				}
				&:active, &.@{pre}active
				{
					&, &::before, &::after { color: @color; }
					background-color: @active-bg-color;
				}
				&:disabled
				{
					&, &::before, &::after { color: @bg-color !important; }
					background-color: transparent !important;
				}
			}
		}
		.link-line--bg(@class: link-line--bg)
		{
			&.@{pre}@{class}
			{
				@border-color: fade(@bg-color, alpha(@bg-color) / 2 * 100);

				&, &::before, &::after { color: @bg-color; }
				border-color: @border-color;
				background-color: transparent;

				&:hover
				{
					&, &::before, &::after { color: @color; }
					border-color: transparent;
					background-color: @hover-bg-color;
				}
				&:active, &.@{pre}active
				{
					&, &::before, &::after { color: @color; }
					border-color: transparent;
					background-color: @active-bg-color;
				}
				&:disabled
				{
					&, &::before, &::after { color: @bg-color !important; }
					border-color: @border-color !important;
					background-color: transparent !important;
				}
			}
		}
	}
}

#ui-button()
{
	.states()
	{
		.default()  {};
		.hover()    {};
		.focus()    {};
		.active()   {};
		.disabled() {};
	}


	.template(@font-size, @padding-ver, @padding-hor, @border-width)
	{
		@em: 2 * @padding-ver + 1em * @button-line-height;
		@px: 2 * @border-width;

		min-width:  calc(@em + @px);
		min-height: calc(@em + @px);
		padding:      @padding-ver @padding-hor;
		font-size:    @font-size;
		border-width: @border-width;
	}
	.template(...)
	{
		&:extend(.button\:template all);
	}

	.sizes(@font-size, @prefix)
	{
		#ui.fs-sizes-mixins(@font-size, @prefix);
	}
}


& when (@use-button)
{
	.button\:template
	{
		margin:         @button-margin;
		font-weight:    @button-font-weight;
		line-height:    @button-line-height;
		text-transform: @button-text-transform;
		border-radius:  @button-radius;
		border-style:   @button-border-style;

		display: inline-block;
		position: relative;
		overflow: hidden;
		vertical-align: middle;
		font-style: normal;
		text-align: center;
		text-decoration: none;
		border-color: transparent;
		background-clip: border-box;
		cursor: pointer;
		user-select: none;
		appearance: none;
		transition: color 0.1s cubic-bezier(0, 0, 0.2, 1),
					border-color 0.1s cubic-bezier(0, 0, 0.2, 1),
					background-color 0.2s cubic-bezier(0.25,0.8,0.25,1);

		// remove text-decoration for links
		&:hover
		{
			text-decoration: none;
		}
		&:disabled, &[disabled]
		{
			opacity: @button-disabled-opacity !important;
			cursor:  @button-disabled-cursor;
			pointer-events: none;
		}
	}
}
