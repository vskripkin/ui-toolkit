.label(@foo: bar) when (default()) { has: false; }
.addon(@foo: bar) when (default()) { has: false; }
.hint(@foo:  bar) when (default()) { has: false; }


#ui()
{
	.textfield(
		@font-size:      @textfield-font-size,
		@line-height:    @textfield-line-height,
		@margin-bottom:  @textfield-margin-bottom,
		@padding-top:    @textfield-padding-top,
		@padding-bottom: @textfield-padding-bottom,
		@padding-hor:    @textfield-padding-hor,
		@border-top:     @textfield-border-top,
		@border-bottom:  @textfield-border-bottom,
		@border-hor:     @textfield-border-hor,
		@prefix:         @textfield-class-prefix)
	{
		@has-label: #ui-textfield-label.check()[has];
		@has-addon: #ui-textfield-addon.check()[has];
		@has-hint:  #ui-textfield-hint.check()[has];

		@pre: @prefix;
		@fs: @font-size;
		@lh: @line-height;
		@mb: @margin-bottom;
		@pt: @padding-top;
		@pb: @padding-bottom;
		@ph: @padding-hor;
		@bt: @border-top;
		@bb: @border-bottom;
		@bh: @border-hor;

		@pad-ver-min: if(@pt > @pb, @pb, @pt);

		#ui-textfield.construct(@pre, @fs, @lh, @mb, @pt, @pb, @ph, @bt, @bb, @bh);
		#ui-textfield-label.construct(@pre, @has-label, @fs, @lh, @pt, @pb, @ph, @bt, @bb, @bh, @has-addon);
		#ui-textfield-addon.construct(@pre, @has-addon, @fs, @lh, @pt, @pb, @ph, @bt, @bb, @bh);
		#ui-textfield-hint.construct(@pre, @has-hint, @fs, @lh, @ph, @bh);

		#ui-textfield-mixins.sizes(@fs, @pre, @has-label, @has-addon, @has-hint);
		#ui-textfield-mixins.addon-width(@pre, @has-label, @has-addon, @padding-hor, @pad-ver-min);

		& when (@margin-bottom > 0)
		{
			.margin-bottom(@margin-bottom);
		}


		.thin()
		{
			&.@{pre}thin
			{
				padding-left:  @pad-ver-min;
				padding-right: @pad-ver-min;
			}

			& when (@has-label)
			{
				&.@{pre}thin ~ .@{pre}label, & ~ .@{pre}label.@{pre}thin, & ~ .@{pre}addon ~ .@{pre}label.@{pre}thin
				{
					padding-left:  @pad-ver-min;
					padding-right: @pad-ver-min;
					transform-origin: @pad-ver-min top;
				}
			}
			& when (@has-addon)
			{
				& ~ .@{pre}addon.@{pre}thin.@{pre}left
				{
					padding-left: @pad-ver-min;
				}
				& ~ .@{pre}addon.@{pre}thin.@{pre}right
				{
					padding-right: @pad-ver-min;
				}
			}
		}
		.margin-bottom(@value)
		{
			&
			{
				margin-bottom: @value;
			}
			& when (@has-hint)
			{
				& ~ .@{pre}hint, & ~ .@{pre}error
				{
					// браузер округляет line-height вниз, поэтому здесь округляем до десятых рема

					//@rem: floor(@fs * @textfield-hint-font-size-rate * @line-height * 10) / 10;
					//@em: @textfield-hint-padding-top + @textfield-hint-padding-bottom;
					//margin-bottom: calc(@value - @rem - @em);
					@fs-px: @fs * @textfield-hint-font-size-rate * @font-size-root;
					@content-em: unit(round(floor(@fs-px * @lh) / @fs-px * 100) / 100, em);
					@pad-y: @textfield-hint-padding-top + @textfield-hint-padding-bottom;

					margin-top: (-1 * @value);
					margin-bottom: calc(@value - @pad-y - @content-em);
				}
			}
		}
	}
}

#ui-textfield()
{
	.states()
	{
		.placeholder() {};
		.default()  {};
		.focus()    {};
		.valid()    {};
		.invalid()  {};
		.disabled() {};
		.readonly() {};
	}

	.construct(@pre, @fs, @lh, @mb, @pt, @pb, @ph, @bt, @bb, @bh)
	{
		#ui-textfield.template(@fs, @lh, @mb, @pt, @pb, @ph, @bt, @bb, @bh);


		#ui-textfield.states();
		.states();

		&
		{
			.default();
		}
		&::placeholder
		{
			.placeholder();
		}
		&:focus, &.@{pre}focus
		{
			.focus();
		}
		&.@{pre}valid, &.@{pre}valid:focus
		{
			.valid();
		}
		&.@{pre}invalid, &.@{pre}invalid:focus
		{
			.invalid();
		}
		&:disabled
		{
			opacity: @textfield-disabled-opacity !important;
			cursor:  @textfield-disabled-cursor;

			.disabled() !important;
		}
		&[readonly]
		{
			.readonly();
		}
	}

	.template(
		@font-size,   @line-height,    @margin-bottom,
		@padding-top, @padding-bottom, @padding-hor,
		@border-top,  @border-bottom,  @border-hor)
	{
		margin-bottom: @margin-bottom;
		padding: @padding-top @padding-hor @padding-bottom;
		border-width: @border-top @border-hor @border-bottom;

		font-size: @font-size;
		line-height: @line-height;

		@fs-px: @font-size * @font-size-root;
		@content-em: unit(round(floor(@fs-px * @line-height) / @fs-px * 100) / 100, em);
		@padding-y: @padding-top + @padding-bottom;
		@border-y: @border-top + @border-bottom;
		height: calc(@content-em + @padding-y + @border-y);
	}
	.template(...)
	{
		display: block;
		width: 100%;
		position: relative;
		overflow: hidden;
		text-overflow: ellipsis;
		font-family: inherit;
		text-align: left;
		text-decoration: none;
		vertical-align: middle;
		appearance: none;
		border-style: solid;
		border-color: transparent;
		background: transparent;
	}
}

#ui-textfield-label()
{
	.check()
	{
		has: true;
		.label();
	}

	.states()
	{
		.default()  {};
		.hover()    {};
		.filled()   {};
		.moved()    {};
		.focus()    {};
		.valid()    {};
		.invalid()  {};
		.disabled() {};
		.readonly() {};
	}

	.construct(@pre, @enable, @fs, @lh, @pt, @pb, @ph, @bt, @bb, @bh, @has-addon) when (@enable)
	{
		#ui-textfield-label.template(@pre, @fs, @lh, @pt, @pb, @ph, @bt, @bb, @bh, @has-addon);


		#ui-textfield-label.states();
		.label();

		& ~ .@{pre}label
		{
			.default();
		}
		&:hover ~ .@{pre}label
		{
			.hover();
		}

		&:focus ~ .@{pre}label,
		&:valid ~ .@{pre}label,
		&:disabled ~ .@{pre}label,
		&[readonly] ~ .@{pre}label,
		&[placeholder]:not([placeholder=" "]) ~ .@{pre}label,
		&.@{pre}focus ~ .@{pre}label
		{
			.moved();
		}
		&:-webkit-autofill ~ .@{pre}label
		{
			.moved();
		}
		/*
		  для iOS, так как там нет поддержки атрибута inputmode="email", поэтому единственный
		  способ показать клавиатуру с собачкой - использовать [type="email"], и в этом случае
		  псевдокласс :valid сработает не когда ввели первый символ, а когда ввели именно email,
		  поэтому не рассчитываем на :valid, а используем вместо него :not(:placeholder-shown)
		*/
		&[type="email"]:not(:placeholder-shown) ~ .@{pre}label
		{
			.moved();
		}

		&:valid ~ .@{pre}label
		{
			.filled();
		}
		&:focus ~ .@{pre}label, &.@{pre}focus ~ .@{pre}label
		{
			.focus();
		}
		&.@{pre}valid ~ .@{pre}label, &.@{pre}valid:focus ~ .@{pre}label
		{
			.valid();
		}
		&.@{pre}invalid ~ .@{pre}label,  &.@{pre}invalid:focus ~ .@{pre}label
		{
			.invalid();
		}
		&:disabled ~ .@{pre}label
		{
			.disabled() !important;
		}
		&[readonly] ~ .@{pre}label
		{
			.readonly();
		}
	}

	.template(
		@pre,         @font-size,      @line-height,
		@padding-top, @padding-bottom, @padding-hor,
		@border-top,  @border-bottom,  @border-hor,
		@has-addon)
	{
		& ~ .@{pre}label
		{
			padding: @padding-top @padding-hor @padding-bottom;
			border-width: @border-top @border-hor @border-bottom;

			font-size: @font-size;
			line-height: @line-height;

			@fs-px: @font-size * @font-size-root;
			@content-em: unit(round(floor(@fs-px * @line-height) / @fs-px * 100) / 100, em);
			@padding-y: @padding-top + @padding-bottom;
			@border-y: @border-top + @border-bottom;
			height: calc(@content-em + @padding-y + @border-y);


			position: absolute;
			z-index: 2;
			top: 0;
			left: 0;
			width: 100%;
			display: block;
			overflow: hidden;
			text-overflow: ellipsis;
			white-space: nowrap;
			pointer-events: none;

			background: transparent !important;
			border-color: transparent !important;
			border-style: solid;
			box-shadow: none !important;

			transition: text-indent @textfield-label-trsn-duration @textfield-label-trsn-function,
						transform   @textfield-label-trsn-duration @textfield-label-trsn-function,
						color       @textfield-label-trsn-duration @textfield-label-trsn-function;
			transform: @textfield-label-transform-default;
			transform-origin: @padding-hor top;
			transform-origin: calc(@padding-hor + @border-hor) top;
			transform-origin-x: calc(@padding-hor + @border-hor);
			transform-origin-y: top;
			text-indent: 0em;
		}

		&:focus ~ .@{pre}label,
		&:valid ~ .@{pre}label,
		&:disabled ~ .@{pre}label,
		&[readonly] ~ .@{pre}label,
		&[placeholder]:not([placeholder=" "]) ~ .@{pre}label,
		&.@{pre}focus ~ .@{pre}label
		{
			transform: @textfield-label-transform !important;
			text-indent: 0em !important;
		}
		&:-webkit-autofill ~ .@{pre}label
		{
			transform: @textfield-label-transform !important;
			text-indent: 0em !important;
		}
		&[type="email"]:not(:placeholder-shown) ~ .@{pre}label
		{
			transform: @textfield-label-transform !important;
			text-indent: 0em !important;
		}

		&:valid:not(:focus) ~ .@{pre}label,
		&:disabled ~ .@{pre}label,
		&[readonly] ~ .@{pre}label,
		&[placeholder]:not([placeholder=" "]) ~ .@{pre}label
		{
			transition: none;
		}
		&:-webkit-autofill ~ .@{pre}label
		{
			transition: none;
		}


		& when (@has-addon)
		{
			& ~ .@{pre}label ~ .@{pre}addon
			{
				display: none;
			}
			&:focus ~ .@{pre}label ~ .@{pre}addon,
			&:valid ~ .@{pre}label ~ .@{pre}addon,
			&:disabled ~ .@{pre}label ~ .@{pre}addon,
			&[readonly] ~ .@{pre}label ~ .@{pre}addon,
			&[placeholder]:not([placeholder=" "]) ~ .@{pre}label ~ .@{pre}addon,
			&.@{pre}focus ~ .@{pre}label ~ .@{pre}addon
			{
				display: block;
			}
			&:-webkit-autofill ~ .@{pre}label ~ .@{pre}addon
			{
				display: block;
			}
			&[type="email"]:not(:placeholder-shown) ~ .@{pre}label ~ .@{pre}addon
			{
				display: block;
			}
		}
	}
}

#ui-textfield-addon()
{
	.check()
	{
		has: true;
		.addon();
	}

	.states()
	{
		.default()  {};
		.hover()    {};
		.focus()    {};
		.valid()    {};
		.invalid()  {};
		.disabled() {};
		.readonly() {};
	}

	.construct(@pre, @enable, @fs, @lh, @pt, @pb, @ph, @bt, @bb, @bh) when (@enable)
	{
		#ui-textfield-addon.template(@pre, @fs, @lh, @pt, @pb, @ph, @bt, @bb, @bh);


		#ui-textfield-addon.states();
		.addon();

		& ~ .@{pre}addon
		{
			.default();
		}
		&:hover ~ .@{pre}addon
		{
			.hover();
		}
		&:focus ~ .@{pre}addon,
		&.@{pre}focus ~ .@{pre}addon
		{
			.focus();
		}
		&.@{pre}valid ~ .@{pre}addon,
		&.@{pre}valid:focus ~ .@{pre}addon
		{
			.valid();
		}
		&.@{pre}invalid ~ .@{pre}addon,
		&.@{pre}invalid:focus ~ .@{pre}addon
		{
			.invalid();
		}
		&:disabled ~ .@{pre}addon
		{
			.disabled() !important;
		}
		&[readonly] ~ .@{pre}addon
		{
			.readonly();
		}
	}

	.template(
		@pre,         @font-size,      @line-height,
		@padding-top, @padding-bottom, @padding-hor,
		@border-top,  @border-bottom,  @border-hor
	)
	{
		&-@{textfield-cont-postfix}
		{
			display: block;
			position: relative;
			z-index: 1;
		}

		& ~ .@{pre}addon
		{
			padding: @padding-top @padding-hor @padding-bottom;
			border-width: @border-top @border-hor @border-bottom;

			font-size: @font-size;
			line-height: @line-height;

			@fs-px: @font-size * @font-size-root;
			@content-em: unit(round(floor(@fs-px * @line-height) / @fs-px * 100) / 100, em);
			@padding-y: @padding-top + @padding-bottom;
			@border-y: @border-top + @border-bottom;
			height: calc(@content-em + @padding-y + @border-y);

			display: block;
			position: absolute;
			top: 0;
			z-index: 1;
			font-family: inherit;
			text-align: center;
			white-space: nowrap;
			pointer-events: none;

			background: transparent !important;
			border-color: transparent !important;
			box-shadow: none !important;

			&.@{pre}left
			{
				left: 0;
				text-align: left !important;
				padding-right: 0 !important;
			}
			&.@{pre}right
			{
				right: 0;
				text-align: right !important;
				padding-left: 0 !important;
			}
		}
	}
}

#ui-textfield-hint()
{
	.check()
	{
		has: true;
		.hint();
	}

	.states()
	{
		.default()  {};
		.hover()    {};
		.focus()    {};
		.valid()    {};
		.invalid()  {};
		.disabled() {};
		.readonly() {};
	}

	.construct(@pre, @enable, @fs, @lh, @ph, @bh) when (@enable)
	{
		#ui-textfield-hint.template(@pre, @fs, @lh, @ph, @bh);


		#ui-textfield-hint.states();
		.hint();

		& ~ .@{pre}hint,
		& ~ .@{pre}error
		{
			.default();
		}
		&:hover ~ .@{pre}hint
		{
			.hover();
		}
		&:focus ~ .@{pre}hint,
		&.@{pre}focus ~ .@{pre}hint
		{
			.focus();
		}
		&.@{pre}valid ~ .@{pre}hint,
		&.@{pre}valid:focus ~ .@{pre}hint
		{
			.valid();
		}
		&.@{pre}invalid ~ .@{pre}hint,  &.@{pre}invalid:focus ~ .@{pre}hint,
		&.@{pre}invalid ~ .@{pre}error, &.@{pre}invalid:focus ~ .@{pre}error
		{
			.invalid();
		}
		&:disabled ~ .@{pre}hint
		{
			.disabled() !important;
		}
		&[readonly] ~ .@{pre}hint
		{
			.readonly();
		}
	}

	.template(@pre, @font-size, @line-height, @padding-hor, @border-hor)
	{
		& ~ .@{pre}hint, & ~ .@{pre}error
		{
			@pad-hor: round(@padding-hor / @textfield-hint-font-size-rate, 3);

			display: block;
			padding: @textfield-hint-padding-top  @pad-hor  @textfield-hint-padding-bottom;
			font-size: round(@font-size * @textfield-hint-font-size-rate, 3);
			line-height: @line-height;

			border-width: 0 @border-hor;
			border-style: solid;
			border-color: transparent !important;
		}

		& ~ .@{pre}error, &.@{pre}invalid ~ .@{pre}error ~ .@{pre}hint
		{
			display: none !important;
		}
		&.@{pre}invalid ~ .@{pre}error
		{
			display: block !important;
		}
	}
}


#ui-textfield-mixins()
{
	.sizes(@font-size, @pre, @has-label: false, @has-addon: false, @has-hint: false)
	{
		#ui.fs-sizes-mixins(@font-size, @pre);
	}
	.sizes(@font-size, @pre, @has-label: false, @has-addon: false, @has-hint: false) when (@has-label = true)
	{
		.size-nano()  { &.@{pre}nano  ~ .@{pre}label { font-size: @size-nano;  }}
		.size-mini()  { &.@{pre}mini  ~ .@{pre}label { font-size: @size-mini;  }}
		.size-tiny()  { &.@{pre}tiny  ~ .@{pre}label { font-size: @size-tiny;  }}
		.size-small() { &.@{pre}small ~ .@{pre}label { font-size: @size-small; }}

		.size-big()   { &.@{pre}big   ~ .@{pre}label { font-size: @size-big;   }}
		.size-large() { &.@{pre}large ~ .@{pre}label { font-size: @size-large; }}
		.size-huge()  { &.@{pre}huge  ~ .@{pre}label { font-size: @size-huge;  }}
		.size-great() { &.@{pre}great ~ .@{pre}label { font-size: @size-great; }}

		.size(@font-size, @class)
		{
			&.@{pre}@{class} ~ .@{pre}label
			{
				font-size: @font-size;
			}
		}
	}
	.sizes(@font-size, @pre, @has-label: false, @has-addon: false, @has-hint: false) when (@has-addon = true)
	{
		#ui-textfield-mixins.sizes(@font-size, @pre);

		.size-nano()  { &.@{pre}nano  ~ .@{pre}addon { font-size: @size-nano;  }}
		.size-mini()  { &.@{pre}mini  ~ .@{pre}addon { font-size: @size-mini;  }}
		.size-tiny()  { &.@{pre}tiny  ~ .@{pre}addon { font-size: @size-tiny;  }}
		.size-small() { &.@{pre}small ~ .@{pre}addon { font-size: @size-small; }}

		.size-big()   { &.@{pre}big   ~ .@{pre}addon { font-size: @size-big;   }}
		.size-large() { &.@{pre}large ~ .@{pre}addon { font-size: @size-large; }}
		.size-huge()  { &.@{pre}huge  ~ .@{pre}addon { font-size: @size-huge;  }}
		.size-great() { &.@{pre}great ~ .@{pre}addon { font-size: @size-great; }}

		.size(@font-size, @class)
		{
			&.@{pre}@{class} ~ .@{pre}addon
			{
				font-size: @font-size;
			}
		}
	}
	.sizes(@font-size, @pre, @has-label: false, @has-addon: false, @has-hint: false) when (@has-hint = true)
	{
		@rate: @textfield-hint-font-size-rate;

		.size-nano()  { &.@{pre}nano  ~ .@{pre}hint { font-size: round(@rate * @size-nano, 3);  }}
		.size-mini()  { &.@{pre}mini  ~ .@{pre}hint { font-size: round(@rate * @size-mini, 3);  }}
		.size-tiny()  { &.@{pre}tiny  ~ .@{pre}hint { font-size: round(@rate * @size-tiny, 3);  }}
		.size-small() { &.@{pre}small ~ .@{pre}hint { font-size: round(@rate * @size-small, 3); }}

		.size-big()   { &.@{pre}big   ~ .@{pre}hint { font-size: round(@rate * @size-big, 3);   }}
		.size-large() { &.@{pre}large ~ .@{pre}hint { font-size: round(@rate * @size-large, 3); }}
		.size-huge()  { &.@{pre}huge  ~ .@{pre}hint { font-size: round(@rate * @size-huge, 3);  }}
		.size-great() { &.@{pre}great ~ .@{pre}hint { font-size: round(@rate * @size-great, 3); }}

		.size(@font-size, @class)
		{
			&.@{pre}@{class} ~ .@{pre}hint
			{
				font-size: round(@rate * @font-size, 3);
			}
		}
	}
	.sizes(...)
	{
		.size(@font-size, @class)
		{
			&.@{pre}@{class}
			{
				font-size: @font-size;
			}
		}

		.size-apply()
		{
			.size-nano();
			.size-mini();
			.size-tiny();
			.size-small();

			.size-big();
			.size-large();
			.size-huge();
			.size-great();
		}
	}


	.addon-width(@pre, @has-label, @has-addon, @ph, @pv-min) when (@has-label = true), (@has-addon = true)
	{
		.addon-width(left, @start: 1em, @step: 0.5em, @total: 5)
		{
			&.@{pre}pad-l
			{
				#ui-textfield-mixins._width-classes(left, @pre, @has-label, @has-addon, @ph, @pv-min, @start, @step, @total);
			}
		}
		.addon-width(right, @start: 1em, @step: 0.5em, @total: 5)
		{
			&.@{pre}pad-r
			{
				#ui-textfield-mixins._width-classes(right, @pre, @has-label, @has-addon, @ph, @pv-min, @start, @step, @total);
			}
		}
	}
	._width-classes(@prop, @pre, @has-label, @has-addon, @ph, @pv-min, @value, @step, @total, @curr: 0) when (@curr <= @total)
	{
		&@{curr}
		{
			padding-@{prop}: @value;
		}

		& when (@has-label) and (@has-addon)
		{
			&@{curr} ~ .@{pre}addon ~ .@{pre}label
			{
				& when (@prop = left)
				{
					text-indent: @value - @ph;
				}
				& when (@prop = right)
				{
					padding-@{prop}: @value;
				}
			}
			&@{curr}.@{pre}thin ~ .@{pre}addon ~ .@{pre}label, &@{curr} ~ .@{pre}addon ~ .@{pre}label.@{pre}thin
			{
				& when (@prop = left)
				{
					text-indent: @value - @pv-min;
				}
			}
		}

		#ui-textfield-mixins._width-classes(@prop, @pre, @has-label, @has-addon, @ph, @pv-min, @value + @step, @step, @total, @curr + 1);
	}
}
