.addon(@foo: bar) when (default()) { has: false; }
.hint(@foo: bar)  when (default()) { has: false; }

#ui()
{
	.textfield(@font-size: @textfield-font-size, @prefix: @textfield-class-prefix)
	{
		@has-addon: #ui-textfield-addon.check()[has];
		@has-hint: #ui-textfield-hint.check()[has];

		#ui-textfield.construct(@font-size, @prefix);
		#ui-textfield-hint.construct(@font-size, @prefix, @has-hint);
		#ui-textfield-addon.construct(@font-size, @prefix, @has-addon);

		#ui-textfield-mixins.sizes(@font-size, @prefix, @has-addon, @has-hint);
		#ui-textfield-mixins.addon-width(@prefix, @has-addon);
	}
}

#ui-textfield()
{
	._states()
	{
		.placeholder() {};
		.default()  {};
		.focus()    {};
		.valid()    {};
		.invalid()  {};
		.disabled() {};
		.readonly() {};
	}

	.construct(@font-size, @prefix)
	{
		#ui-textfield._states();
		.states();

		#ui-textfield.template(@font-size);


		&
		{
			.default();
		}
		&::placeholder
		{
			.placeholder();
		}
		&:focus, &.@{prefix}focus
		{
			.focus();
		}
		&.@{prefix}valid, &.@{prefix}valid:focus
		{
			.valid();
		}
		&.@{prefix}invalid, &.@{prefix}invalid:focus
		{
			.invalid();
		}
		&:disabled
		{
			opacity: @textfield-disabled-opacity !important;
			cursor:  @textfield-disabled-cursor;

			.disabled() !important;
		}
		&:read-only
		{
			.readonly();
		}
	}

	.template(@font-size)
	{
		font-size: @font-size;
	}
	.template(...)
	{
		display: block;
		width: 100%;
		position: relative;
		overflow: hidden;
		text-overflow: ellipsis;
		font-family: inherit;
		line-height: @textfield-line-height;
		text-align: left;
		text-decoration: none;
		vertical-align: middle;
		appearance: none;
		border: none;
		background: transparent;
	}
}

#ui-textfield-addon()
{
	.check()
	{
		has: true;
		.addon();
	}

	._states()
	{
		.default()  {};
		.focus()    {};
		.valid()    {};
		.invalid()  {};
		.disabled() {};
		.readonly() {};
	}

	.construct(@font-size, @prefix, @enable) when (@enable)
	{
		#ui-textfield-addon._states();
		.addon();

		#ui-textfield-addon.template(@font-size, @prefix);


		& ~ .@{prefix}addon
		{
			.default();
		}
		&:focus ~ .@{prefix}addon,
		&.@{prefix}focus ~ .@{prefix}addon
		{
			.focus();
		}
		&.@{prefix}valid ~ .@{prefix}addon,
		&.@{prefix}valid:focus ~ .@{prefix}addon
		{
			.valid();
		}
		&.@{prefix}invalid ~ .@{prefix}addon,
		&.@{prefix}invalid:focus ~ .@{prefix}addon
		{
			.invalid();
		}
		&:disabled ~ .@{prefix}addon
		{
			.disabled() !important;
		}
		&:read-only ~ .@{prefix}addon
		{
			.readonly();
		}
	}

	.template(@font-size, @prefix, @postfix: @textfield-cont-postfix)
	{
		&-@{postfix}
		{
			display: block;
			position: relative;
			z-index: 1;
		}

		& ~ .@{prefix}addon
		{
			display: block;
			position: absolute;
			top: 0;
			z-index: 1;
			font-family: inherit;
			font-size: @font-size;
			line-height: @textfield-line-height;
			text-align: center;
			white-space: nowrap;
			pointer-events: none;

			background: transparent !important;
			border-color: transparent !important;
			box-shadow: none !important;

			&.@{prefix}left
			{
				left: 0;
				text-align: left !important;
				padding-right: 0 !important;
			}
			&.@{prefix}right
			{
				right: 0;
				text-align: right !important;
				padding-left: 0 !important;
			}
		}
	}
}

#ui-textfield-hint()
{
	.check()
	{
		has: true;
		.hint();
	}

	._states()
	{
		.default()  {};
		.focus()    {};
		.valid()    {};
		.invalid()  {};
		.disabled() {};
		.readonly() {};
	}

	.construct(@font-size, @prefix, @enable) when (@enable)
	{
		#ui-textfield-hint._states();
		.hint();

		#ui-textfield-hint.template(@font-size, @prefix);


		& ~ .@{prefix}hint, & ~ .@{prefix}error
		{
			.default();
		}
		&:focus ~ .@{prefix}hint,  &.@{prefix}focus ~ .@{prefix}hint,
		&:focus ~ .@{prefix}error, &.@{prefix}focus ~ .@{prefix}error
		{
			.focus();
		}
		&.@{prefix}valid ~ .@{prefix}hint, &.@{prefix}valid:focus ~ .@{prefix}hint
		{
			.valid();
		}
		&.@{prefix}invalid ~ .@{prefix}error, &.@{prefix}invalid:focus ~ .@{prefix}error
		{
			.invalid();
		}
		&:disabled ~ .@{prefix}hint
		{
			.disabled() !important;
		}
		&:read-only ~ .@{prefix}hint
		{
			.readonly();
		}
	}

	.template(@font-size, @prefix)
	{
		& ~ .@{prefix}hint, & ~ .@{prefix}error
		{
			display: block;
		}

		& ~ .@{prefix}error, &.@{prefix}invalid ~ .@{prefix}error ~ .@{prefix}hint
		{
			display: none !important;
		}
		&.@{prefix}invalid ~ .@{prefix}error
		{
			display: block !important;
		}
	}
}


#ui-textfield-mixins()
{
	.sizes(@font-size, @prefix, @has-addon, @has-hint) when (@has-addon = false)
	{
		#ui.fs-sizes-mixins(@font-size, @prefix);
	}
	.sizes(@font-size, @prefix, @has-addon, @has-hint) when (@has-addon = true)
	{
		#ui.fs-sizes(@font-size);

		.size-nano()  { &.@{prefix}nano,  &.@{prefix}nano  + .@{prefix}addon { font-size: @size-nano;  }}
		.size-mini()  { &.@{prefix}mini,  &.@{prefix}mini  + .@{prefix}addon { font-size: @size-mini;  }}
		.size-tiny()  { &.@{prefix}tiny,  &.@{prefix}tiny  + .@{prefix}addon { font-size: @size-tiny;  }}
		.size-small() { &.@{prefix}small, &.@{prefix}small + .@{prefix}addon { font-size: @size-small; }}

		.size-big()   { &.@{prefix}big,   &.@{prefix}big   + .@{prefix}addon { font-size: @size-big;   }}
		.size-large() { &.@{prefix}large, &.@{prefix}large + .@{prefix}addon { font-size: @size-large; }}
		.size-huge()  { &.@{prefix}huge,  &.@{prefix}huge  + .@{prefix}addon { font-size: @size-huge;  }}
		.size-great() { &.@{prefix}great, &.@{prefix}great + .@{prefix}addon { font-size: @size-great; }}

		.size-apply()
		{
			.size-nano();
			.size-mini();
			.size-tiny();
			.size-small();

			.size-big();
			.size-large();
			.size-huge();
			.size-great();
		}
	}


	.addon-width(@prefix, @has-addon) when (@has-addon = true)
	{
		.addon-width(left, @start: 1em, @step: 0.5em, @total: 5)
		{
			&.@{prefix}pad-l
			{
				padding-left: @start;

				#ui-textfield-mixins._width-classes(padding-left, @prefix, @start + @step, @step, @total);
			}
		}
		.addon-width(right, @start: 1em, @step: 0.5em, @total: 5)
		{
			&.@{prefix}pad-r
			{
				padding-right: @start;

				#ui-textfield-mixins._width-classes(padding-right, @prefix, @start + @step, @step, @total);
			}
		}
	}
	._width-classes(@prop, @prefix, @value, @step, @total, @curr: 1) when (@curr <= @total)
	{
		&@{curr}
		{
			@{prop}: @value;
		}

		#ui-textfield-mixins._width-classes(@prop, @prefix, @value + @step, @step, @total, @curr + 1);
	}
}
