.addon(@foo: bar) when (default()) { has: false; }

#ui()
{
	.textfield(@prefix: @textfield-class-prefix)
	{
		@has-addon: #ui-textfield-addon.check()[has];

		#ui-textfield.construct(@has-addon, @prefix);
		#ui-textfield-addon.construct(@has-addon, @prefix);
	}
}

#ui-textfield()
{
	._states()
	{
		.default()
		{
			font-size: @textfield-font-size;
		}

		.placeholder() {};
		.focus()    {};
		.valid()    {};
		.invalid()  {};
		.disabled() {};
		.readonly() {};
	}

	.construct(@has-addon, @prefix)
	{
		#ui-textfield._states();
		.states();

		@font-size: .default[font-size];

		#ui-textfield.template(@has-addon);
		#ui-textfield.sizes(@font-size, @prefix, @has-addon);

		&
		{
			&
			{
				.default();
			}
			&::placeholder
			{
				.placeholder();
			}
			&:focus, &.@{prefix}focus
			{
				.focus();
			}
			&.@{prefix}valid, &.@{prefix}valid:focus
			{
				.valid();
			}
			&.@{prefix}invalid, &.@{prefix}invalid:focus
			{
				.invalid();
			}
			&:disabled
			{
				opacity: @textfield-disabled-opacity !important;
				cursor:  @textfield-disabled-cursor;

				.disabled() !important;
			}
			&:read-only
			{
				.readonly();
			}
		}
	}

	.template(@has-addon)
	{
		display: block;
		width: 100%;
		position: relative;
		overflow: hidden;
		text-overflow: ellipsis;
		font-family: inherit;
		line-height: @textfield-line-height;
		text-align: left;
		text-decoration: none;
		vertical-align: middle;
		appearance: none;
		border: none;
		background: transparent;
	}

	.sizes(@font-size, @prefix, @has-addon) when (@has-addon = false)
	{
		#ui.fs-sizes-mixins(@font-size, @prefix);
	}
	.sizes(@font-size, @prefix, @has-addon) when (@has-addon = true)
	{
		#ui.fs-sizes(@font-size);

		.size-nano()  { &.@{prefix}nano,  &.@{prefix}nano  + .@{prefix}addon { font-size: @size-nano;  }}
		.size-mini()  { &.@{prefix}mini,  &.@{prefix}mini  + .@{prefix}addon { font-size: @size-mini;  }}
		.size-tiny()  { &.@{prefix}tiny,  &.@{prefix}tiny  + .@{prefix}addon { font-size: @size-tiny;  }}
		.size-small() { &.@{prefix}small, &.@{prefix}small + .@{prefix}addon { font-size: @size-small; }}

		.size-big()   { &.@{prefix}big,   &.@{prefix}big   + .@{prefix}addon { font-size: @size-big;   }}
		.size-large() { &.@{prefix}large, &.@{prefix}large + .@{prefix}addon { font-size: @size-large; }}
		.size-huge()  { &.@{prefix}huge,  &.@{prefix}huge  + .@{prefix}addon { font-size: @size-huge;  }}
		.size-great() { &.@{prefix}great, &.@{prefix}great + .@{prefix}addon { font-size: @size-great; }}

		.size-apply()
		{
			.size-nano();
			.size-mini();
			.size-tiny();
			.size-small();

			.size-big();
			.size-large();
			.size-huge();
			.size-great();
		}
	}
}

#ui-textfield-addon()
{
	.check()
	{
		has: true;
		.addon();
	}

	._states()
	{
		.default()
		{
			#ui-textfield._states.default();
		}

		.focus()    {};
		.valid()    {};
		.invalid()  {};
		.disabled() {};
		.readonly() {};
	}

	.construct(@enable, @prefix) when (@enable)
	{
		#ui-textfield-addon._states();
		.addon();

		@font-size: .default[font-size];

		#ui-textfield-addon.template(@font-size, @prefix);

		& ~ .@{prefix}addon
		{
			.default();
		}
		&:focus ~ .@{prefix}addon, &.@{prefix}focus ~ .@{prefix}addon
		{
			.focus();
		}
		&.@{prefix}valid ~ .@{prefix}addon, &.@{prefix}valid:focus ~ .@{prefix}addon
		{
			.valid();
		}
		&.@{prefix}invalid ~ .@{prefix}addon, &.@{prefix}invalid:focus ~ .@{prefix}addon
		{
			.invalid();
		}
		&:disabled ~ .@{prefix}addon
		{
			.disabled() !important;
		}
		&:read-only ~ .@{prefix}addon
		{
			.readonly();
		}


		.addon-left(@start: 0, @step: 0, @total: 5)
		{
			&.@{prefix}addon-left
			{
				padding-left: @start;

				#ui-textfield-addon._width-classes(padding-left, @prefix, @start + @step, @step, @total);
			}
		}
		.addon-right(@start: 0, @step: 0, @total: 5)
		{
			&.@{prefix}addon-right
			{
				padding-right: @start;

				#ui-textfield-addon._width-classes(padding-right, @prefix, @start + @step, @step, @total);
			}
		}
	}

	.template(@font-size, @prefix, @postfix: @textfield-cont-postfix)
	{
		&.@{prefix}addon-left ~ .@{prefix}addon
		{
			left: 0;
			text-align: left !important;
			padding-right: 0 !important;
		}
		&.@{prefix}addon-right ~ .@{prefix}addon
		{
			right: 0;
			text-align: right !important;
			padding-left: 0 !important;
		}

		&-@{postfix}
		{
			display: block;
			position: relative;
			z-index: 1;

			.@{prefix}addon
			{
				position: absolute;
				top: 0;
				bottom: 0;
				z-index: 1;
				font-family: inherit;
				line-height: @textfield-line-height;
				text-align: center;
				white-space: nowrap;
				pointer-events: none;

				background: transparent !important;
				border-color: transparent !important;
				box-shadow: none !important;
			}
		}
	}


	._width-classes(@prop, @prefix, @value, @step, @total, @curr: 1) when (@curr <= @total)
	{
		&.@{prefix}w@{curr}
		{
			@{prop}: @value;
		}

		#ui-textfield-addon._width-classes(@prop, @prefix, @value + @step, @step, @total, @curr + 1);
	}
}
