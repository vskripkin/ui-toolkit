#ui()
{
	.tooltip(@bg-color,
		@color: @tooltip-color,
		@hover: @tooltip-hover-color-bg,
		@font-size: @tooltip-font-size,
		@pad-ver: @tooltip-padding-ver,
		@pad-hor: @tooltip-padding-hor,
		@border-width: @tooltip-border-width,
		@prefix: @tooltip-class-prefix)
	{
		#ui-tooltip.construct(@bg-color, @color, @font-size, @pad-ver, @pad-hor, @border-width, @prefix);
	}
}

#ui-tooltip()
{
	._states()
	{
		.default() {};
		.hover() {};
	}

	.construct(@bg-color, @color, @font-size, @pad-ver, @pad-hor, @border-width, @prefix)
	{
		@hover-bg-color:  #ui.hover-bg(@hover, @bg-color)[result];

		#ui-tooltip.template(@font-size, @pad-ver, @pad-hor, @border-width);
		#ui-tooltip.add-arrow();

		#ui-tooltip.sizes(@font-size, @prefix);


		#ui-tooltip._states();
		.states();

		&
		{
			&
			{
				border-color: @bg-color;
				background-color: @bg-color;

				.default();
			}
			&:hover
			{
				border-color: @hover-bg-color;
				background-color: @hover-bg-color;

				.hover();
			}
		}
	}

	.template(@font-size, @padding-ver, @padding-hor, @border-width)
	{
		@em: 2 * @padding-ver + 1em * @tooltip-line-height;
		@px: 2 * @border-width;

		min-width:  calc(@em + @px);
		min-height: calc(@em + @px);
		padding:      @padding-ver @padding-hor;
		font-size:    @font-size;
		border-width: @border-width;
	}
	.template(...)
	{
		line-height:   @tooltip-line-height;
		border-radius: @tooltip-radius;
		border-style:  @tooltip-border-style;

		position: absolute;
		z-index: 10000000;
		display: block;
		width: auto;
		margin: 0;
		border-color: transparent;
		cursor: pointer;

		&.fixed
		{
			position: fixed !important;
		}

		&.animation
		{
			opacity: 0;
			transition: opacity 0.15s cubic-bezier(0, 0, 0.2, 1);
		}
		&.in
		{
			opacity: 1;
		}
		&.out
		{
			opacity: 0;
		}

		a, a:link, a:visited
		{
			color: inherit;
		}
		a
		{
			text-decoration: underline;

			&:hover
			{
				text-decoration: none;
			}
		}

		&.outset
		{
			&.top    { margin-bottom: @tooltip-margin; }
			&.bottom { margin-top:    @tooltip-margin; }
			&.left   { margin-right:  @tooltip-margin; }
			&.right  { margin-left:   @tooltip-margin; }
		}

		&.inset
		{
			&.top    { margin-top:    @tooltip-margin; }
			&.bottom { margin-bottom: @tooltip-margin; }
			&.left   { margin-left:   @tooltip-margin; }
			&.right  { margin-right:  @tooltip-margin; }
		}
	}

	.sizes(@font-size, @prefix)
	{
		#ui.fs-sizes-mixins(@font-size, @prefix);
	}


	.add-arrow()
	{
		&:before
		{
			content: '';
			pointer-events: none;
			text-shadow: none !important;
			background: none !important;
			width: 0 !important;
			height: 0 !important;
			border-width: @tooltip-arrow-width;
			border-style: solid !important;
			border-color: transparent;
			position: absolute;
			display: block;
		}
		&.no_arrow:before
		{
			content: none;
			border-width: 0;
		}

		&.left:before
		{
			border-left-color: inherit !important;
			left: 100%;
		}
		&.right:before
		{
			border-right-color: inherit !important;
			right: 100%;
		}
		&.top:before
		{
			border-top-color: inherit !important;
			top: 100%;
		}
		&.bottom:before
		{
			border-bottom-color: inherit !important;
			bottom: 100%;
		}

		&.left.start_arrow:before,
		&.right.start_arrow:before
		{
			top: @tooltip-arrow-margin;
		}

		&.left.end_arrow:before,
		&.right.end_arrow:before
		{
			bottom: @tooltip-arrow-margin;
		}

		&.left.center_arrow:before,
		&.right.center_arrow:before
		{
			top: 50%;
			transform: translateY(-50%);
		}

		&.top.start_arrow:before,
		&.bottom.start_arrow:before
		{
			left: @tooltip-arrow-margin;
		}

		&.top.end_arrow:before,
		&.bottom.end_arrow:before
		{
			right: @tooltip-arrow-margin;
		}

		&.top.center_arrow:before,
		&.bottom.center_arrow:before
		{
			left: 50%;
			transform: translateX(-50%);
		}
	}
}