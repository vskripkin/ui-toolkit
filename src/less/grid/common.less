#ui-grid-css-collect(@type-search, @bp-search, @mode) {};

#ui-grid-common
{
	.generate-mixins(@type, @props, @bp, @class: prefix-stem)
	{
		@prefix-up:    if(@class-up-key   = false, ~'@{bp}', ~'@{bp}-@{class-up-key}');
		@prefix-down:  if(@class-down-key = false, ~'@{bp}', ~'@{bp}-@{class-down-key}');
		@prefix-only:  if(@class-only-key = false, ~'@{bp}', ~'@{bp}-@{class-only-key}');

		each(@props, .(@prop)
		{
			.@{prefix-up}-@{prop}
			{
				#ui-grid-css-collect(@type-search, @bp-search, up) when (@type-search = @type) and (@bp-search = @bp)
				{
					@{prop}: ~'@{prefix-up}-@{prop}';
				}
			}
			.@{prefix-down}-@{prop}
			{
				#ui-grid-css-collect(@type-search, @bp-search, down) when (@type-search = @type) and (@bp-search = @bp)
				{
					@{prop}: ~'@{prefix-down}-@{prop}';
				}
			}
			.@{prefix-only}-@{prop}
			{
				#ui-grid-css-collect(@type-search, @bp-search, only) when (@type-search = @type) and (@bp-search = @bp)
				{
					@{prop}: ~'@{prefix-only}-@{prop}';
				}
			}
		});
	}

	.generate-css(@type, @collected, @bp-name)
	{
		each(@collected, .(@class, @prop, @index)
		{
			.check-uniq(@i) when (@i = 0)
			{
				.@{class}
				{
					#ui-grid-css.apply(@type, @prop, @bp-name);
				}
			}

			.check-uniq(@i) when (@i > 0)
			{
				each(@collected, .(@_, @prop-before, @ii)
				{
					& when (@ii = @i) and not (@prop-before = @prop)
					{
						.check-uniq(@i - 1);
					}
				});
			}

			.check-uniq(@index - 1);
		});
	}
}
