#ui-grid-base-css
{
	@grid:  @grid-grid-class;
	@item:  @grid-item-class;

	.grid()
	{
		.@{grid}
		{
			display: flex;
			flex-flow: row nowrap;

			position: relative;
			margin: 0 auto;
			width: auto;

			min-width: auto;
			max-width: @grid-width;

			& &, &&--full
			{
				min-width: 100%;
				max-width: none;
			}
		}
	}
	.item()
	{
		.@{item}
		{
			flex: 1 1 0%;

			position: relative;
			width: auto;
			min-width: auto;
			max-width: 100%;
		}
	}

	// with media and modes
	.grid-inline()
	{
		display: inline-flex;
	}
	.grid-table()
	{
		display: table;
		width: 100%;

		._grid-table-item();
	}
	.grid-table-inline()
	{
		display: inline-table;
		width: auto;

		._grid-table-item();
	}
	._grid-table-item()
	{
		& > .@{item}
		{
			display: table-cell;
			vertical-align: top;
			flex: none !important;
		}
	}


	.gaps(@gap)
	{
		.@{item} > .@{grid}
		{
			margin-left:  (-1 * @gap / 2);
			margin-right: (-1 * @gap / 2);
		}

		.@{item}
		{
			padding-left:  (@gap / 2);
			padding-right: (@gap / 2);
		}
	}
	// with media and modes
	.collapse()
	{
		&.@{grid}, .@{grid} > .@{item} > &, & > .@{item} > .@{grid}
		{
			margin-left:  auto;
			margin-right: auto;
		}

		& > .@{item}
		{
			padding-left:  0;
			padding-right: 0;
		}
	}


	.apply(@prop)
	{
		& when (@prop = inline)       { #ui-grid-base-css.grid-inline();       }
		& when (@prop = table)        { #ui-grid-base-css.grid-table();        }
		& when (@prop = table-inline) { #ui-grid-base-css.grid-table-inline(); }
		& when (@prop = collapse)     { #ui-grid-base-css.collapse();          }
	}
}
