#ui-grid-used-collect()
{
	@grid: false;
}

.use-grid()
{
	#ui-grid-used-collect()
	{
		@grid: true;
	}
}

#ui-grid-used
{
	.css(@bp-name: false)
	{
		@used: #ui-grid-used-collect()[@grid];

		& when (@used)
		{
			& when (@bp-name = false)
			{
				#ui-grid-base-css.grid();
				#ui-grid-base-css.item();
			}
			& when not (@bp-name = false)
			{
				#ui-grid-base-css.gaps(@break-points[@@bp-name][gap]);
			}
		}
	}
}


#ui-grid-base-collect(@bp-class) {};

#ui-grid-base
{
	@props: inline, table, table-inline, collapse;

	.generate-mixins(@bp-class-up, @bp-class-down, @bp-class-only)
	{
		@props: #ui-grid-base[@props];

		each(@props, .(@prop)
		{
			@class-up:   ~'@{bp-class-up}-@{prop}';
			@class-down: ~'@{bp-class-down}-@{prop}';
			@class-only: ~'@{bp-class-only}-@{prop}';

			.@{class-up}
			{
				#ui-collector(@bp-search) when (@bp-search = @bp-class-up)
				{
					@{prop}: @class-up;
				}
			}
			.@{class-down}
			{
				#ui-collector(@bp-search) when (@bp-search = @bp-class-down)
				{
					@{prop}: @class-down;
				}
			}
			.@{class-only}
			{
				#ui-collector(@bp-search) when (@bp-search = @bp-class-only)
				{
					@{prop}: @class-only;
				}
			}
		});
	}

	.generate-css(@bp-class)
	{
		@collected: #ui-grid-base-collect(@bp-class);

		each(@collected, .(@class, @prop)
		{
			.@{class}
			{
				#ui-grid-base-css.apply(@prop);
			}
		});
	}
}
