#ui
{
	.grid(
		@row:  row,  @col:  col,
		@grid: grid, @item: item)
	{
		.@{grid}
		{
			#ui-grid-css.grid();
		}
		.@{item}
		{
			#ui-grid-css.item();
		}
	}
}

#ui-grid-css
{
	.grid()
	{
		position: relative;
		margin: 0 auto;

		display: flex;
		flex-flow: row wrap;

		width: 100%;
		min-width: auto;
		max-width: @grid-width;

		& &, &&--full
		{
			width: auto;
			min-width: 100%;
			max-width: none;
		}
		&&--inline
		{
			display: inline-flex;

			width: auto;
			min-width: auto;
			max-width: 100%;
		}
	}
	.item()
	{
		position: relative;

		flex: 1 1 0;

		width: auto;
		min-width: auto;
		max-width: 100%;
	}


	.width-tight()
	{
		flex-grow: 0;
		flex-basis: auto;

		width: auto;
		max-width: 100%;
	}
	.width-untight()
	{
		flex-grow: 1;
		flex-basis: auto;

		width: auto;
		max-width: 100%;
	}
	.width-auto()
	{
		flex-grow: 1;
		flex-basis: 0;

		width: auto;
		max-width: 100%;
	}


	.width(@width)
	{
		flex-basis: auto;
		width: @width;
		max-width: @width;
	}
	.toright(@range)
	{
		@{grid-default-dir}: @range;
		@{grid-opposite-dir}: auto;
	}
	.toleft(@range)
	{
		@{grid-opposite-dir}: @range;
		@{grid-default-dir}: auto;
	}
	.offset(@range)
	{
		margin-@{grid-default-dir}: @range !important;
	}
}

#ui-grid-columns
{
	._collect(@bp-search, @postfix-search, @only) {}

	._generate-mixins(
		@bp-class,
		@cols-total,
		@postfix: false)
	{
		@postfix-norm: if(@postfix = false, ~'', ~'-@{postfix}');
		@prefix-up: ~'@{bp-class}';
		@prefix-only: ~'@{bp-class}-@{grid-only-key}';

		#ui-grid-columns._make-mixins(@bp-class, @cols-total, @postfix, @postfix-norm, @prefix-up, @prefix-only);
	}

	._make-mixins(
		@bp-class,
		@cols-total,
		@postfix,
		@postfix-norm,
		@prefix-up,
		@prefix-only,
		@col-number: 0) when (@col-number <= @cols-total)
	{
		@suffix: ~'@{col-number}@{postfix-norm}';

		@params-up: {
			bp-class: @bp-class;
			prefix: @prefix-up;
			suffix: @suffix;
			number: @col-number;
			total: @cols-total;
		};
		@params-only: {
			bp-class: @bp-class;
			prefix: @prefix-only;
			suffix: @suffix;
			number: @col-number;
			total: @cols-total;
		};


		.@{prefix-up}-@{suffix}
		{
			#ui-grid-columns
			{
				._collect(@bp-search, @postfix-search, @only)
					when (@bp-search = @bp-class) and (@postfix-search = @postfix) and not (@only)
				{
					@width: @params-up;
				}
			}
		}
		.@{prefix-only}-@{suffix}
		{
			#ui-grid-columns
			{
				._collect(@bp-search, @postfix-search, @only)
					when (@bp-search = @bp-class) and (@postfix-search = @postfix) and (@only)
				{
					@width: @params-only;
				}
			}
		}

		.@{prefix-up}-toright-@{suffix}
		{
			#ui-grid-columns
			{
				._collect(@bp-search, @postfix-search, @only)
					when (@bp-search = @bp-class) and (@postfix-search = @postfix) and not (@only)
				{
					@toright: @params-up;
				}
			}
		}
		.@{prefix-up}-toleft-@{suffix}
		{
			#ui-grid-columns
			{
				._collect(@bp-search, @postfix-search, @only)
					when (@bp-search = @bp-class) and (@postfix-search = @postfix) and not (@only)
				{
					@toleft: @params-up;
				}
			}
		}
		.@{prefix-up}-offset-@{suffix}
		{
			#ui-grid-columns
			{
				._collect(@bp-search, @postfix-search, @only)
					when (@bp-search = @bp-class) and (@postfix-search = @postfix) and not (@only)
				{
					@offset: @params-up;
				}
			}
		}

		.@{prefix-only}-toright-@{suffix}
		{
			#ui-grid-columns
			{
				._collect(@bp-search, @postfix-search, @only)
					when (@bp-search = @bp-class) and (@postfix-search = @postfix) and (@only)
				{
					@toright: @params-only;
				}
			}
		}
		.@{prefix-only}-toleft-@{suffix}
		{
			#ui-grid-columns
			{
				._collect(@bp-search, @postfix-search, @only)
					when (@bp-search = @bp-class) and (@postfix-search = @postfix) and (@only)
				{
					@toleft: @params-only;
				}
			}
		}
		.@{prefix-only}-offset-@{suffix}
		{
			#ui-grid-columns
			{
				._collect(@bp-search, @postfix-search, @only)
					when (@bp-search = @bp-class) and (@postfix-search = @postfix) and (@only)
				{
					@offset: @params-only;
				}
			}
		}


		#ui-grid-columns._make-mixins(
			@bp-class,
			@cols-total,
			@postfix,
			@postfix-norm,
			@prefix-up,
			@prefix-only,
			@col-number + 1);
	}



	._generate-css(@collected)
	{
		each(@collected, .(@data, @type-var, @index)
		{
			@type: replace(@type-var, '@', '');
			@number: @data[number];

			.check-uniq(@i) when (@i = 0)
			{
				@prefix: @data[prefix];
				@stem: if(@type = width, ~'', ~'-@{type}');
				@suffix: @data[suffix];

				.@{prefix}@{stem}-@{suffix}
				{
					@ratio: @number / @data[total];
					@rate: round(percentage(@ratio), 4);

					& when (@type = width)
					{
						#ui-grid-css.width(@rate);
					}
					& when (@type = toright)
					{
						#ui-grid-css.toright(@rate);
					}
					& when (@type = toleft)
					{
						#ui-grid-css.toleft(@rate);
					}
					& when (@type = offset)
					{
						#ui-grid-css.offset(@rate);
					}
				}
			}

			.check-uniq(@i) when (@i > 0)
			{
				each(@collected, .(@data-before, @type-var-before, @ii)
				{
					@type-before: replace(@type-var-before, '@', '');
					@number-before: @data-before[number];

					& when  (@ii = @i) and not (@type-before = @type),
							(@ii = @i) and not (@number-before = @number)
					{
						.check-uniq(@i - 1);
					}
				});
			}
			.check-uniq(@index - 1);
		});
	}
}


#ui-grid-helpers
{
	._collect(@bp-search, @only) {}

	._generate-mixins(@bp-class)
	{
		@prefix-up: ~'@{bp-class}';
		@prefix-only: ~'@{bp-class}-@{grid-only-key}';

		@params-up: {
			bp-class: @bp-class;
			prefix: @prefix-up;
		};
		@params-only: {
			bp-class: @bp-class;
			prefix: @prefix-only;
		};

		.@{prefix-up}-tight
		{
			#ui-grid-helpers
			{
				._collect(@bp-search, @only) when (@bp-search = @bp-class) and not (@only)
				{
					@tight: @params-up;
				}
			}
		}
		.@{prefix-up}-untight
		{
			#ui-grid-helpers
			{
				._collect(@bp-search, @only) when (@bp-search = @bp-class) and not (@only)
				{
					@untight: @params-up;
				}
			}
		}
		.@{prefix-up}-auto
		{
			#ui-grid-helpers
			{
				._collect(@bp-search, @only) when (@bp-search = @bp-class) and not (@only)
				{
					@auto: @params-up;
				}
			}
		}

		.@{prefix-only}-tight
		{
			#ui-grid-helpers
			{
				._collect(@bp-search, @only) when (@bp-search = @bp-class) and (@only)
				{
					@tight: @params-only;
				}
			}
		}
		.@{prefix-only}-untight
		{
			#ui-grid-helpers
			{
				._collect(@bp-search, @only) when (@bp-search = @bp-class) and (@only)
				{
					@untight: @params-only;
				}
			}
		}
		.@{prefix-only}-auto
		{
			#ui-grid-helpers
			{
				._collect(@bp-search, @only) when (@bp-search = @bp-class) and (@only)
				{
					@auto: @params-only;
				}
			}
		}
	}

	._generate-css(@collected)
	{
		each(@collected, .(@data, @type-var, @index)
		{
			@type: replace(@type-var, '@', '');

			.check-uniq(@i) when (@i = 0)
			{
				@prefix: @data[prefix];
				@stem: @type;

				.@{prefix}-@{stem}
				{
					& when (@type = tight)
					{
						#ui-grid-css.width-tight();
					}
					& when (@type = untight)
					{
						#ui-grid-css.width-untight();
					}
					& when (@type = auto)
					{
						#ui-grid-css.width-auto();
					}
				}
			}

			.check-uniq(@i) when (@i > 0)
			{
				each(@collected, .(@data-before, @type-var-before, @ii)
				{
					@type-before: replace(@type-var-before, '@', '');

					& when (@ii = @i) and not (@type-before = @type)
					{
						.check-uniq(@i - 1);
					}
				});
			}

			.check-uniq(@index - 1);
		});
	}
}

#ui-grid
{
	._mixins()
	{
		each(@grid-bps-order, .(@bp-name)
		{
			@class: @grid-bps[@@bp-name][class];
			@from:  @grid-bps[@@bp-name][from];
			@to:    @grid-bps[@@bp-name][to];

			each(@grid-columns, .(@grid-cols)
			{
				@postfix: @grid-cols[postfix];
				@columns: @grid-cols[columns];

				#ui-grid-columns._generate-mixins(@class, @columns, @postfix);
			});

			#ui-grid-helpers._generate-mixins(@class);
		});
	}

	._collect()
	{
		each(@grid-bps-order, .(@bp-name)
		{
			@class: @grid-bps[@@bp-name][class];
			@from:  @grid-bps[@@bp-name][from];
			@to:    @grid-bps[@@bp-name][to];

			@mq-only: @grid-bps[@@bp-name][mq-only];
			@mq-up:   @grid-bps[@@bp-name][mq-up];
			@mq-down: @grid-bps[@@bp-name][mq-down];

			#ui-grid._apply-collected(up, @mq-up,
			{
				each(@grid-columns, .(@grid-cols)
				{
					@postfix: @grid-cols[postfix];

					@cols-up: #ui-grid-columns._collect(@class, @postfix, false);
					#ui-grid-columns._generate-css(@cols-up);
				});

				@hels-up: #ui-grid-helpers._collect(@class, false);
				#ui-grid-helpers._generate-css(@hels-up);
			});

			#ui-grid._apply-collected(only, @mq-only,
			{
				each(@grid-columns, .(@grid-cols)
				{
					@postfix: @grid-cols[postfix];

					@cols-only: #ui-grid-columns._collect(@class, @postfix, true);
					#ui-grid-columns._generate-css(@cols-only);
				});

				@hels-only: #ui-grid-helpers._collect(@class, true);
				#ui-grid-helpers._generate-css(@hels-only);
			});
		});
	}


	._apply-collected(up, @mq-up, @css)
	{
		& when (@mq-up = start)
		{
			@css();
		}
		& when not (@mq-up = start)
		{
			@media @mq-up
			{
				@css();
			}
		}
	}

	._apply-collected(only, @mq-only, @css)
	{
		& when not (@mq-only = false)
		{
			@media @mq-only
			{
				@css();
			}
		}
	}
}

#ui-grid._mixins();
& { #ui-grid._collect(); }
