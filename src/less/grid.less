#ui-grid-css
{
	.grid()
	{
		position: relative;
		margin: 0 auto;

		display: flex;
		flex-flow: row wrap;

		width: 100%;
		min-width: auto;
		max-width: @grid-width;

		& &, &&--full
		{
			width: auto;
			min-width: 100%;
			max-width: none;
		}
		&&--inline
		{
			display: inline-flex;

			width: auto;
			min-width: auto;
			max-width: 100%;
		}
	}
	.item()
	{
		position: relative;

		flex: 1 1 0;

		width: auto;
		min-width: auto;
		max-width: 100%;
	}


	.width(@width)
	{
		flex-basis: auto;
		width:      @width;
		max-width:  @width;
	}
	.toright(@range)
	{
		@{grid-default-dir}:  @range;
		@{grid-opposite-dir}: auto;
	}
	.toleft(@range)
	{
		@{grid-opposite-dir}: @range;
		@{grid-default-dir}:  auto;
	}
	.offset(@range)
	{
		margin-@{grid-default-dir}: @range !important;
	}


	.flex-row()        { flex-direction: row; }
	.flex-column()     { flex-direction: column; }
	.flex-row-rev()    { flex-direction: row-reverse; }
	.flex-column-rev() { flex-direction: column-reverse; }

	.flex-nowrap()   { flex-wrap: nowrap; }
	.flex-wrap()     { flex-wrap: wrap; }
	.flex-wrap-rev() { flex-wrap: wrap-reverse; }

	.flex-items-start()    { align-items: flex-start; }
	.flex-items-end()      { align-items: flex-end; }
	.flex-items-center()   { align-items: center; }
	.flex-items-baseline() { align-items: baseline; }
	.flex-items-stretch()  { align-items: stretch; }

	.flex-justify-start()   { justify-content: flex-start; }
	.flex-justify-end()     { justify-content: flex-end; }
	.flex-justify-center()  { justify-content: center; }
	.flex-justify-between() { justify-content: space-between; }
	.flex-justify-around()  { justify-content: space-around; }

	.flex-content-start()   { align-content: flex-start; }
	.flex-content-end()     { align-content: flex-end; }
	.flex-content-center()  { align-content: center; }
	.flex-content-between() { align-content: space-between; }
	.flex-content-around()  { align-content: space-around; }
	.flex-content-stretch() { align-content: stretch; }


	.width-tight()
	{
		flex-grow: 0;
		flex-basis: auto;

		width: auto;
		max-width: 100%;
	}
	.width-untight()
	{
		flex-grow: 1;
		flex-basis: auto;

		width: auto;
		max-width: 100%;
	}
	.width-auto()
	{
		flex-grow: 1;
		flex-basis: 0;

		width: auto;
		max-width: 100%;
	}


	.item-first   { order: -1; }
	.item-last    { order:  1; }
	.item-initial { order:  0; }

	.item-self-start()    { align-self: flex-start; }
	.item-self-end()      { align-self: flex-end; }
	.item-self-center()   { align-self: center; }
	.item-self-baseline() { align-self: baseline; }
	.item-self-stretch()  { align-self: stretch; }

	.grow-0()  { flex-grow: 0; }
	.grow-1()  { flex-grow: 1; }
	.grow-2()  { flex-grow: 2; }
	.grow-3()  { flex-grow: 3; }
	.grow-4()  { flex-grow: 4; }
	.grow-5()  { flex-grow: 5; }
	.grow-6()  { flex-grow: 6; }
	.grow-7()  { flex-grow: 7; }
	.grow-8()  { flex-grow: 0; }
	.grow-9()  { flex-grow: 9; }
	.grow-10() { flex-grow: 10; }

	.shrink-0()  { flex-shrink: 0; }
	.shrink-1()  { flex-shrink: 1; }
	.shrink-2()  { flex-shrink: 2; }
	.shrink-3()  { flex-shrink: 3; }
	.shrink-4()  { flex-shrink: 4; }
	.shrink-5()  { flex-shrink: 5; }
	.shrink-6()  { flex-shrink: 6; }
	.shrink-7()  { flex-shrink: 7; }
	.shrink-8()  { flex-shrink: 0; }
	.shrink-9()  { flex-shrink: 9; }
	.shrink-10() { flex-shrink: 10; }



	.columns(@type, @val)
	{
		& when (@type = width)   { #ui-grid-css.width(@val); }
		& when (@type = widthpx) { #ui-grid-css.width(@val); }
		& when (@type = toright) { #ui-grid-css.toright(@val); }
		& when (@type = toleft)  { #ui-grid-css.toleft(@val); }
		& when (@type = offset)  { #ui-grid-css.offset(@val); }
	}
	.helper(@type)
	{
		& when (@type = row)        { #ui-grid-css.flex-row(); }
		& when (@type = column)     { #ui-grid-css.flex-column(); }
		& when (@type = row-rev)    { #ui-grid-css.flex-row-rev(); }
		& when (@type = column-rev) { #ui-grid-css.flex-column-rev(); }

		& when (@type = nowrap)   { #ui-grid-css.flex-nowrap(); }
		& when (@type = wrap)     { #ui-grid-css.flex-wrap(); }
		& when (@type = wrap-rev) { #ui-grid-css.flex-wrap-rev(); }

		& when (@type = items-start)    { #ui-grid-css.flex-items-start(); }
		& when (@type = items-end)      { #ui-grid-css.flex-items-end(); }
		& when (@type = items-center)   { #ui-grid-css.flex-items-center(); }
		& when (@type = items-baseline) { #ui-grid-css.flex-items-baseline(); }
		& when (@type = items-stretch)  { #ui-grid-css.flex-items-stretch(); }

		& when (@type = justify-start)   { #ui-grid-css.flex-justify-start(); }
		& when (@type = justify-end)     { #ui-grid-css.flex-justify-end(); }
		& when (@type = justify-center)  { #ui-grid-css.flex-justify-center(); }
		& when (@type = justify-between) { #ui-grid-css.flex-justify-between(); }
		& when (@type = justify-around)  { #ui-grid-css.flex-justify-around(); }

		& when (@type = content-start)   { #ui-grid-css.flex-content-start(); }
		& when (@type = content-end)     { #ui-grid-css.flex-content-end(); }
		& when (@type = content-center)  { #ui-grid-css.flex-content-center(); }
		& when (@type = content-between) { #ui-grid-css.flex-content-between(); }
		& when (@type = content-around)  { #ui-grid-css.flex-content-around(); }
		& when (@type = content-stretch) { #ui-grid-css.flex-content-stretch(); }


		& when (@type = tight)   { #ui-grid-css.width-tight(); }
		& when (@type = untight) { #ui-grid-css.width-untight(); }
		& when (@type = auto)    { #ui-grid-css.width-auto(); }

		& when (@type = first)   { #ui-grid-css.item-first(); }
		& when (@type = last)    { #ui-grid-css.item-last(); }
		& when (@type = initial) { #ui-grid-css.item-initial(); }

		& when (@type = self-start)    { #ui-grid-css.item-self-start(); }
		& when (@type = self-end)      { #ui-grid-css.item-self-end(); }
		& when (@type = self-center)   { #ui-grid-css.item-self-center(); }
		& when (@type = self-baseline) { #ui-grid-css.item-self-baseline(); }
		& when (@type = self-stretch)  { #ui-grid-css.item-self-stretch(); }

		& when (@type = grow-0)  { #ui-grid-css.grow-0(); }
		& when (@type = grow-1)  { #ui-grid-css.grow-1(); }
		& when (@type = grow-2)  { #ui-grid-css.grow-2(); }
		& when (@type = grow-3)  { #ui-grid-css.grow-3(); }
		& when (@type = grow-4)  { #ui-grid-css.grow-4(); }
		& when (@type = grow-5)  { #ui-grid-css.grow-5(); }
		& when (@type = grow-6)  { #ui-grid-css.grow-6(); }
		& when (@type = grow-7)  { #ui-grid-css.grow-7(); }
		& when (@type = grow-8)  { #ui-grid-css.grow-8(); }
		& when (@type = grow-9)  { #ui-grid-css.grow-9(); }
		& when (@type = grow-10) { #ui-grid-css.grow-10(); }

		& when (@type = shrink-0)  { #ui-grid-css.shrink-0(); }
		& when (@type = shrink-1)  { #ui-grid-css.shrink-1(); }
		& when (@type = shrink-2)  { #ui-grid-css.shrink-2(); }
		& when (@type = shrink-3)  { #ui-grid-css.shrink-3(); }
		& when (@type = shrink-4)  { #ui-grid-css.shrink-4(); }
		& when (@type = shrink-5)  { #ui-grid-css.shrink-5(); }
		& when (@type = shrink-6)  { #ui-grid-css.shrink-6(); }
		& when (@type = shrink-7)  { #ui-grid-css.shrink-7(); }
		& when (@type = shrink-8)  { #ui-grid-css.shrink-8(); }
		& when (@type = shrink-9)  { #ui-grid-css.shrink-9(); }
		& when (@type = shrink-10) { #ui-grid-css.shrink-10(); }
	}
}

#ui-grid-base
{
	._collect()
	{
		@grid: false;
	}

	._generate-mixins()
	{
		.use-grid()
		{
			#ui-grid-base
			{
				._collect()
				{
					@grid: true;
				}
			}
		}
	}

	._generate-css(@collected)
	{
		& when (@collected[@grid])
		{
			@grid: @grid-grid-class;
			@item: @grid-item-class;
			@row:  @grid-row-class;
			@col:  @grid-col-class;

			.@{grid}
			{
				#ui-grid-css.grid();
			}
			.@{item}
			{
				#ui-grid-css.item();
			}
		}
	}
}

#ui-grid-columns
{
	@props: width, widthpx, toleft, toright, offset;

	._collect(@bp-search, @cols-search, @postfix-search, @only) {}

	._generate-mixins(@bp, @cols-total, @postfix: false, @col-number: 0) when (@col-number <= @cols-total)
	{
		@postfix-norm: if(@postfix = false, ~'', ~'-@{postfix}');
		@suffix: ~'@{col-number}@{postfix-norm}';

		@prefix-up:    if(@grid-up-key   = false, ~'@{bp}', ~'@{bp}-@{grid-up-key}');
		@prefix-down:  if(@grid-down-key = false, ~'@{bp}', ~'@{bp}-@{grid-down-key}');
		@prefix-only:  if(@grid-only-key = false, ~'@{bp}', ~'@{bp}-@{grid-only-key}');


		@props: #ui-grid-columns[@props];

		each(@props, .(@prop)
		{
			@prop-stem: replace(@prop, 'width', '');
			@stem: if(@prop = width, @prop-stem, ~'-@{prop-stem}');

			.@{prefix-up}@{stem}-@{suffix}
			{
				#ui-grid-columns
				{
					._collect(@bp-search, @cols-search, @postfix-search, @mod)
						when
							(@bp-search = @bp) and
							(@cols-search = @cols-total) and
							(@postfix-search = @postfix) and
							(@mod = up)
					{
						@data: {
							prop:   @prop;
							prefix: @prefix-up;
							suffix: @suffix;
							number: @col-number;
						}
					}
				}
			}
			.@{prefix-down}@{stem}-@{suffix}
			{
				#ui-grid-columns
				{
					._collect(@bp-search, @cols-search, @postfix-search, @mod)
						when
							(@bp-search = @bp) and
							(@cols-search = @cols-total) and
							(@postfix-search = @postfix) and
							(@mod = down)
					{
						@data: {
							prop:   @prop;
							prefix: @prefix-down;
							suffix: @suffix;
							number: @col-number;
						}
					}
				}
			}
			.@{prefix-only}@{stem}-@{suffix}
			{
				#ui-grid-columns
				{
					._collect(@bp-search, @cols-search, @postfix-search, @mod)
						when
							(@bp-search = @bp) and
							(@cols-search = @cols-total) and
							(@postfix-search = @postfix) and
							(@mod = only)
					{
						@data: {
							prop:   @prop;
							prefix: @prefix-only;
							suffix: @suffix;
							number: @col-number;
						}
					}
				}
			}
		});

		#ui-grid-columns._generate-mixins(@bp, @cols-total, @postfix, @col-number + 1);
	}

	._generate-css(@collected, @columns-total)
	{
		each(@collected, .(@data, @k, @index)
		{
			@prop:   @data[prop];
			@number: @data[number];

			.check-uniq(@i) when (@i = 0)
			{
				@prefix: @data[prefix];
				@suffix: @data[suffix];

				@prop-stem: replace(@prop, 'width', '');
				@stem: if(@prop = width, @prop-stem, ~'-@{prop-stem}');

				.@{prefix}@{stem}-@{suffix}
				{
					@ratio: @number / @columns-total;

					& when (@prop = widthpx)
					{
						@rate: round(@grid-width * @ratio, 3);
						#ui-grid-css.columns(@prop, @rate);
					}
					& when not (@prop = widthpx)
					{
						@rate: round(percentage(@ratio), 4);
						#ui-grid-css.columns(@prop, @rate);
					}
				}
			}

			.check-uniq(@i) when (@i > 0)
			{
				each(@collected, .(@data-before, @k, @ii)
				{
					@prop-before:   @data-before[prop];
					@number-before: @data-before[number];

					& when  (@ii = @i) and not (@prop-before = @prop),
							(@ii = @i) and not (@number-before = @number)
					{
						.check-uniq(@i - 1);
					}
				});
			}
			.check-uniq(@index - 1);
		});
	}
}

#ui-grid-helpers
{
	@props:
	row, row-rev, column, column-rev,
	nowrap, wrap, wrap-rev,
	items-start, items-end, items-center, items-baseline, items-stretch,
	justify-start, justify-end, justify-center, justify-between, justify-around,
	content-start, content-end, content-center, content-between, content-around, content-stretch,

	tight, untight, auto,
	fisrt, last, initial,
	self-start, self-end, self-center, self-baseline, self-stretch,
	grow-0, shrink-0,
	grow-1, grow-2, grow-3, grow-4, grow-5,
	grow-6, grow-7, grow-8, grow-9, grow-10,
	shrink-1, shrink-2, shrink-3, shrink-4, shrink-5,
	shrink-6, shrink-7, shrink-8, shrink-9, shrink-10;

	._collect(@bp-search, @only) {}

	._generate-mixins(@bp)
	{
		@prefix-up:    if(@grid-up-key   = false, ~'@{bp}', ~'@{bp}-@{grid-up-key}');
		@prefix-down:  if(@grid-down-key = false, ~'@{bp}', ~'@{bp}-@{grid-down-key}');
		@prefix-only:  if(@grid-only-key = false, ~'@{bp}', ~'@{bp}-@{grid-only-key}');


		@props: #ui-grid-helpers[@props];

		each(@props, .(@prop, @index)
		{
			.@{prefix-up}-@{prop}
			{
				#ui-grid-helpers
				{
					._collect(@bp-search, @mod) when (@bp-search = @bp) and (@mod = up)
					{
						@data: {
							prop: @prop;
							prefix: @prefix-up;
						}
					}
				}
			}
			.@{prefix-down}-@{prop}
			{
				#ui-grid-helpers
				{
					._collect(@bp-search, @mod) when (@bp-search = @bp) and (@mod = down)
					{
						@data: {
							prop: @prop;
							prefix: @prefix-down;
						}
					}
				}
			}
			.@{prefix-only}-@{prop}
			{
				#ui-grid-helpers
				{
					._collect(@bp-search, @mod) when (@bp-search = @bp) and (@mod = only)
					{
						@data: {
							prop: @prop;
							prefix: @prefix-only;
						}
					}
				}
			}
		});
	}

	._generate-css(@collected)
	{
		each(@collected, .(@data, @k, @index)
		{
			@prop: @data[prop];

			.check-uniq(@i) when (@i = 0)
			{
				@prefix: @data[prefix];
				@stem:   @prop;

				.@{prefix}-@{stem}
				{
					#ui-grid-css.helper(@prop);
				}
			}

			.check-uniq(@i) when (@i > 0)
			{
				each(@collected, .(@data-before, @k, @ii)
				{
					@prop-before: @data-before[prop];

					& when (@ii = @i) and not (@prop-before = @prop)
					{
						.check-uniq(@i - 1);
					}
				});
			}

			.check-uniq(@index - 1);
		});
	}
}

#ui-grid
{
	._mixins()
	{
		#ui-grid-base._generate-mixins();

		each(@break-points-order, .(@bp-name)
		{
			@class: @break-points[@@bp-name][class];

			each(@grid-columns, .(@grid-cols)
			{
				@columns: @grid-cols[columns];
				@postfix: @grid-cols[postfix];

				#ui-grid-columns._generate-mixins(@class, @columns, @postfix);
			});

			#ui-grid-helpers._generate-mixins(@class);
		});
	}

	._collect()
	{
		@grid-base: #ui-grid-base._collect();
		#ui-grid-base._generate-css(@grid-base);

		each(@break-points-order, .(@bp-name)
		{
			@class: @break-points[@@bp-name][class];
			@from:  @break-points[@@bp-name][from];
			@to:    @break-points[@@bp-name][to];

			@mq-up:   @break-points[@@bp-name][mq-up];
			@mq-down: @break-points[@@bp-name][mq-down];
			@mq-only: @break-points[@@bp-name][mq-only];

			@css-up:
			{
				each(@grid-columns, .(@grid-cols)
				{
					@columns: @grid-cols[columns];
					@postfix: @grid-cols[postfix];

					@cols-up: #ui-grid-columns._collect(@class, @columns, @postfix, up);
					#ui-grid-columns._generate-css(@cols-up, @columns);
				});

				@hels-up: #ui-grid-helpers._collect(@class, up);
				#ui-grid-helpers._generate-css(@hels-up);
			};

			@css-down:
			{
				each(@grid-columns, .(@grid-cols)
				{
					@columns: @grid-cols[columns];
					@postfix: @grid-cols[postfix];

					@cols-down: #ui-grid-columns._collect(@class, @columns, @postfix, down);
					#ui-grid-columns._generate-css(@cols-down, @columns);
				});

				@hels-down: #ui-grid-helpers._collect(@class, down);
				#ui-grid-helpers._generate-css(@hels-down);
			};

			@css-only:
			{
				each(@grid-columns, .(@grid-cols)
				{
					@columns: @grid-cols[columns];
					@postfix: @grid-cols[postfix];

					@cols-only: #ui-grid-columns._collect(@class, @columns, @postfix, only);
					#ui-grid-columns._generate-css(@cols-only, @columns);
				});

				@hels-only: #ui-grid-helpers._collect(@class, only);
				#ui-grid-helpers._generate-css(@hels-only);
			};

			#ui-grid._apply-collected(@mq-up,   @css-up);
			#ui-grid._apply-collected(@mq-down, @css-down);
			#ui-grid._apply-collected(@mq-only, @css-only);
		});
	}

	._apply-collected(@media-query, @css)
	{
		& when (@media-query = start)
		{
			@css();
		}
		& when not (@media-query = start) and not (@media-query = false)
		{
			@media @media-query
			{
				@css();
			}
		}
	}
}

#ui-grid._mixins();

&
{
	#ui-grid._collect();
}
