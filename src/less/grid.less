#ui-grid-css
{
	.width(@width)
	{
		flex-basis: auto;
		width: @width;
		max-width: @width;
	}
	.toright(@range)
	{
		@{grid-default-dir}: @range;
		@{grid-opposite-dir}: auto;
	}
	.toleft(@range)
	{
		@{grid-opposite-dir}: @range;
		@{grid-default-dir}: auto;
	}
	.offset(@range)
	{
		margin-@{grid-default-dir}: @range !important;
	}

	.width-tight()
	{
		flex-grow: 0;
		flex-basis: auto;

		width: auto;
		max-width: 100%;
	}
	.width-untight()
	{
		flex-grow: 1;
		flex-basis: auto;

		width: auto;
		max-width: 100%;
	}
	.width-auto()
	{
		flex-basis: 0;

		width: auto;
		max-width: 100%;
	}
}

#ui-grid-columns
{
	._collect(@postfix-search, @only) {}

	._generate-mixins(@postfix, @break-points, @cols-total, @col-number) when (@col-number > -1)
	{
		#ui-grid-columns._generate-mixins(@postfix, @break-points, @cols-total, @col-number - 1);

		@_postfix: if(@postfix = false, ~'', ~'-@{postfix}');
		@suffix: ~'@{col-number}@{_postfix}';

		each(@break-points, .(@point)
		{
			@size: @point[name];

			@prefix-up: ~'@{size}';
			@prefix-only: ~'@{size}-@{grid-only-key}';

			@params-up: {
				size: @size;
				prefix: @prefix-up;
				suffix: @suffix;
				number: @col-number;
				total: @cols-total;
			};
			@params-only: {
				size: @size;
				prefix: @prefix-only;
				suffix: @suffix;
				number: @col-number;
				total: @cols-total;
			};

			.@{prefix-up}-@{suffix}
			{
				#ui-grid-columns
				{
					._collect(@postfix-search, @only) when (@postfix-search = @postfix) and not (@only)
					{
						@width: @params-up;
					}
				}
			}
			.@{prefix-only}-@{suffix}
			{
				#ui-grid-columns
				{
					._collect(@postfix-search, @only) when (@postfix-search = @postfix) and (@only)
					{
						@width: @params-only;
					}
				}
			}

			.@{prefix-up}-toright-@{suffix}
			{
				#ui-grid-columns
				{
					._collect(@postfix-search, @only) when (@postfix-search = @postfix) and not (@only)
					{
						@toright: @params-up;
					}
				}
			}
			.@{prefix-up}-toleft-@{suffix}
			{
				#ui-grid-columns
				{
					._collect(@postfix-search, @only) when (@postfix-search = @postfix) and not (@only)
					{
						@toleft: @params-up;
					}
				}
			}
			.@{prefix-up}-offset-@{suffix}
			{
				#ui-grid-columns
				{
					._collect(@postfix-search, @only) when (@postfix-search = @postfix) and not (@only)
					{
						@offset: @params-up;
					}
				}
			}

			.@{prefix-only}-toright-@{suffix}
			{
				#ui-grid-columns
				{
					._collect(@postfix-search, @only) when (@postfix-search = @postfix) and (@only)
					{
						@toright: @params-only;
					}
				}
			}
			.@{prefix-only}-toleft-@{suffix}
			{
				#ui-grid-columns
				{
					._collect(@postfix-search, @only) when (@postfix-search = @postfix) and (@only)
					{
						@toleft: @params-only;
					}
				}
			}
			.@{prefix-only}-offset-@{suffix}
			{
				#ui-grid-columns
				{
					._collect(@postfix-search, @only) when (@postfix-search = @postfix) and (@only)
					{
						@offset: @params-only;
					}
				}
			}
		});
	}

	._generate-css(@break-point, @cols-collected, @only)
	{
		@search-size: @break-point[name];

		each(@cols-collected, .(@data, @type-var, @index)
		{
			@size: @data[size];
			@type: replace(@type-var, '@', '');
			@number: @data[number];

			& when (@size = @search-size)
			{
				.check-uniq(@i) when (@i = 0)
				{
					@prefix: @data[prefix];
					@stem: if(@type = width, ~'', ~'-@{type}');
					@suffix: @data[suffix];

					.@{prefix}@{stem}-@{suffix}
					{
						@ratio: @number / @data[total];
						@rate: round(percentage(@ratio), 4);

						& when (@type = width)
						{
							#ui-grid-css.width(@rate);
						}
						& when (@type = toright)
						{
							#ui-grid-css.toright(@rate);
						}
						& when (@type = toleft)
						{
							#ui-grid-css.toleft(@rate);
						}
						& when (@type = offset)
						{
							#ui-grid-css.offset(@rate);
						}
					}
				}
				.check-uniq(@i) when (@i > 0)
				{
					each(@cols-collected, .(@data-before, @type-var-before, @ii)
					{
						@size-before: @data-before[size];
						@type-before: replace(@type-var-before, '@', '');
						@number-before: @data-before[number];

						& when  (@ii = @i) and not (@size-before = @size),
								(@ii = @i) and not (@type-before = @type),
								(@ii = @i) and not (@number-before = @number)
						{
							.check-uniq(@i - 1);
						}
					});
				}

				.check-uniq(@index - 1);
			}
		});
	}
}

#ui-grid-helpers
{
	._collect(@postfix-search, @only) {}

	._generate-mixins(@postfix, @break-points)
	{
		@_postfix: if(@postfix = false, ~'', ~'-@{postfix}');
		@suffix: ~'@{_postfix}';

		each(@break-points, .(@point)
		{
			@size: @point[name];

			@prefix-up: ~'@{size}';
			@prefix-only: ~'@{size}-@{grid-only-key}';

			@params-up: {
				size: @size;
				prefix: @prefix-up;
				suffix: @suffix;
			};
			@params-only: {
				size: @size;
				prefix: @prefix-only;
				suffix: @suffix;
			};

			.@{prefix-up}-tight
			{
				#ui-grid-helpers
				{
					._collect(@postfix-search, @only) when (@postfix-search = @postfix) and not (@only)
					{
						@tight: @params-up;
					}
				}
			}
			.@{prefix-up}-untight
			{
				#ui-grid-helpers
				{
					._collect(@postfix-search, @only) when (@postfix-search = @postfix) and not (@only)
					{
						@untight: @params-up;
					}
				}
			}
			.@{prefix-up}-auto
			{
				#ui-grid-helpers
				{
					._collect(@postfix-search, @only) when (@postfix-search = @postfix) and not (@only)
					{
						@auto: @params-up;
					}
				}
			}

			.@{prefix-only}-tight
			{
				#ui-grid-helpers
				{
					._collect(@postfix-search, @only) when (@postfix-search = @postfix) and (@only)
					{
						@tight: @params-only;
					}
				}
			}
			.@{prefix-only}-untight
			{
				#ui-grid-helpers
				{
					._collect(@postfix-search, @only) when (@postfix-search = @postfix) and (@only)
					{
						@untight: @params-only;
					}
				}
			}
			.@{prefix-only}-auto
			{
				#ui-grid-helpers
				{
					._collect(@postfix-search, @only) when (@postfix-search = @postfix) and (@only)
					{
						@auto: @params-only;
					}
				}
			}
		});
	}

	._generate-css(@break-point, @helpers-collected, @only)
	{
		@search-size: @break-point[name];

		each(@helpers-collected, .(@data, @type-var, @index)
		{
			@size: @data[size];
			@type: replace(@type-var, '@', '');

			& when (@size = @search-size)
			{
				.check-uniq(@i) when (@i = 0)
				{
					@prefix: @data[prefix];
					@stem: @type;

					.@{prefix}-@{stem}
					{
						& when (@type = tight)
						{
							#ui-grid-css.width-tight();
						}
						& when (@type = untight)
						{
							#ui-grid-css.width-untight();
						}
						& when (@type = auto)
						{
							#ui-grid-css.width-auto();
						}
					}
				}
				.check-uniq(@i) when (@i > 0)
				{
					each(@helpers-collected, .(@data-before, @type-var-before, @ii)
					{
						@size-before: @data-before[size];
						@type-before: replace(@type-var-before, '@', '');

						& when  (@ii = @i) and not (@size-before = @size),
								(@ii = @i) and not (@type-before = @type)
						{
							.check-uniq(@i - 1);
						}
					});
				}

				.check-uniq(@index - 1);
			}
		});
	}
}


#ui
{
	.grid-columns(
		@postfix: false,
		@cols-count: @grid-columns,
		@break-points: @break-points)
	{
		#ui-grid-columns._generate-mixins(@postfix, @break-points, @cols-count, @cols-count);
	}

	.grid-helpers(
		@postfix: false,
		@break-points: @break-points)
	{
		#ui-grid-helpers._generate-mixins(@postfix, @break-points);
	}

	.grid-collect(
		@postfix: false,
		@break-points: @break-points)
	{
		@cols-up: #ui-grid-columns._collect(@postfix, false);
		@cols-only: #ui-grid-columns._collect(@postfix, true);

		@hels-up: #ui-grid-helpers._collect(@postfix, false);
		@hels-only: #ui-grid-helpers._collect(@postfix, true);

		each(@break-points, .(@break-point, @key, @index)
		{
			@from: @break-point[from];
			@to: @break-point[to];

			& when (@from = 0)
			{
				#ui-grid-columns._generate-css(@break-point, @cols-up, false);
				#ui-grid-helpers._generate-css(@break-point, @hels-up, false);
			}
			& when (@from > 0)
			{
				@media screen and (min-width: @from)
				{
					#ui-grid-columns._generate-css(@break-point, @cols-up, false);
					#ui-grid-helpers._generate-css(@break-point, @hels-up, false);
				}
			}

			& when (@to > 0)
			{
				& when (@from = 0)
				{
					@media screen and (max-width: @to)
					{
						#ui-grid-columns._generate-css(@break-point, @cols-only, true);
						#ui-grid-helpers._generate-css(@break-point, @hels-only, true);
					}
				}
				& when (@from > 0)
				{
					@media screen and (min-width: @from) and (max-width: @to)
					{
						#ui-grid-columns._generate-css(@break-point, @cols-only, true);
						#ui-grid-helpers._generate-css(@break-point, @hels-only, true);
					}
				}
			}
		});
	}
}

#ui.grid-columns();
#ui.grid-helpers();

& { #ui.grid-collect(); }
