.states(...) {};
.params(...) {};

#ui()
{
	.wrapper()
	{
		position: relative;
		margin: 0 auto;
		max-width: @width-wrapper;
		width:  100%;
		height: 100%;
	}

	.clearfix(@clear: both)
	{
		&:after
		{
			content: '';
			clear: @clear;
			display: block;
			visibility: hidden;
			height: 0;
			font-size: 0;
			line-height: 0;
		}
	}

	.hide-text()
	{
		font-size: 0 !important;
		line-height: 0 !important;
		color: transparent !important;
		text-shadow: none !important;
	}
	.disappear()
	{
		position: absolute !important;
		visibility: hidden !important;
		overflow:   hidden !important;
		z-index: -100 !important;
		top:  0;
		left: 0;
		width:  1px !important;
		height: 1px !important;
		clip:   rect(1px, 1px, 1px, 1px) !important;
		margin:  0 !important;
		opacity: 0 !important;
		border: none !important;
		pointer-events: none;
	}

	.spaces-no(...)
	{
		font-size: 0;
		line-height: 0;
		letter-spacing: -1px;
	}
	.spaces-no(nowrap)
	{
		white-space: nowrap;
	}
	.spaces-yes(@fs: @font-size-base, @lh: @line-height-normal, @wp: normal, @valign: top)
	{
		display: inline-block;
		vertical-align: @valign;
		font-size: @fs;
		line-height: @lh;
		white-space: @wp;
		letter-spacing: normal;
	}

	.table(@width: 100%)
	{
		float: none;
		display: table;
		width: @width;
	}
	.table-inline(@width: auto)
	{
		float: none;
		display: inline-table;
		width: @width;
	}
	.table-row()
	{
		float: none;
		display: table-row;
	}
	.table-cell(@width: auto)
	{
		float: none;
		display: table-cell;
		width: @width;
		vertical-align: top;
	}


	.gradient(@dir: to bottom; @rest...)
	{
		background-image: svg-gradient(@dir, @rest);
		background-image: linear-gradient(@dir, @rest);
	}
	.gradient-s(@color1, @color2: rgba(255,255,255,0))
	{
		background-image: svg-gradient(to bottom right,
			@color1  0%, @color1 25%, @color2 25%, @color2 50%,
			@color1 50%, @color1 75%, @color2 75%, @color2 100%);
		background-image: linear-gradient(-45deg,
			@color1  0%, @color1 25%, @color2 25%, @color2 50%,
			@color1 50%, @color1 75%, @color2 75%, @color2 100%);
	}


	.disable-italic()
	{
		div, span,
		h1, h2, h3, h4, h5, h6, p, blockquote,
		a, abbr, acronym, address, big, cite,
		del, dfn, em, ins, kbd, q, s, samp,
		small, strike, strong, sub, sup, tt, var,
		b, u, i, dt, dd, li,
		label, legend, th, td,
		input, button, textarea, select,
		menu, nav, output, section, summary,
		time, mark
		{
			&:lang(zh), &:lang(ko), &:lang(ja), &:lang(ar)
			{
				font-style: normal !important;
			}
		}

		input, textarea
		{
			&:lang(zh), &:lang(ko), &:lang(ja), &:lang(ar)
			{
				&::placeholder
				{
					font-style: normal !important;
				}
			}
		}
	}

	.normalize()
	{
		h1 { font-size: @font-size-h1; }
		h2 { font-size: @font-size-h2; }
		h3 { font-size: @font-size-h3; }
		h4 { font-size: @font-size-h4; }
		h5 { font-size: @font-size-h5; }
		h6 { font-size: @font-size-h6; }
	}
}


#ui()
{
	.fs-sizes(@fs)
	{
		@s-normal: @fs;

		@step: 0.0714286 * @fs;

		@size-nano:  round(@fs - 4 * @step, 3);
		@size-mini:  round(@fs - 3 * @step, 3);
		@size-tiny:  round(@fs - 2 * @step, 3);
		@size-small: round(@fs - 1 * @step, 3);

		@size-big:   round(@fs +  2 * @step, 3);
		@size-large: round(@fs +  4 * @step, 3);
		@size-huge:  round(@fs +  6 * @step, 3);
		@size-great: round(@fs + 10 * @step, 3);
	}

	.fs-sizes-mixins(@font-size, @prefix)
	{
		#ui.fs-sizes(@font-size);

		.size-nano()  { &.@{prefix}nano  { font-size: @size-nano;  }}
		.size-mini()  { &.@{prefix}mini  { font-size: @size-mini;  }}
		.size-tiny()  { &.@{prefix}tiny  { font-size: @size-tiny;  }}
		.size-small() { &.@{prefix}small { font-size: @size-small; }}

		.size-big()   { &.@{prefix}big   { font-size: @size-big;   }}
		.size-large() { &.@{prefix}large { font-size: @size-large; }}
		.size-huge()  { &.@{prefix}huge  { font-size: @size-huge;  }}
		.size-great() { &.@{prefix}great { font-size: @size-great; }}
	}
	.fs-sizes-mixins(...)
	{
		.size-apply()
		{
			.size-nano();
			.size-mini();
			.size-tiny();
			.size-small();

			.size-big();
			.size-large();
			.size-huge();
			.size-great();
		}
	}


	.hover-bg(@hover-color, @bg-color) when (iscolor(@hover-color)), (@hover-color = default)
	{
		result: @hover-color;
	}
	.hover-bg(@hover-color, @bg-color) when not (iscolor(@hover-color)) and not (@hover-color = default)
	{
		@is-transparent: if(@bg-color = transparent, true, false);
		@is-white: if((red(@bg-color) = 255) and (green(@bg-color) = 255) and (blue(@bg-color) = 255), true, false);
		@is-black: if((red(@bg-color) = 0)   and (green(@bg-color) = 0)   and (blue(@bg-color) = 0),   true, false);

		& when (@is-white), (@is-transparent)
		{
			result: shade(@bg-color, 10%);
		}
		& when (@is-black) and not (@is-transparent)
		{
			result: tint(@bg-color, 20%);
		}

		& when not (@is-white) and not (@is-black) and not (@is-transparent)
		{
			& when (@hover-color = bright)
			{
				result: spin(saturate(@bg-color, 20%), 10);
			}
			& when (@hover-color = dark)
			{
				result: shade(@bg-color, 20%);
			}
			& when (@hover-color = darken)
			{
				result: darken(@bg-color, 15%);
			}
			& when (@hover-color = light)
			{
				result: tint(@bg-color, 20%);
			}
			& when (@hover-color = lighten)
			{
				result: lighten(@bg-color, 15%);
			}
		}
	}

	.active-bg(@bg-color)
	{
		@rgb: red(@bg-color);
		@is-gray: if(@rgb = green(@bg-color) and @rgb = blue(@bg-color), true, false);

		& when (@is-gray) and (@rgb >= 128)
		{
			result: shade(@bg-color, 5%);
		}
		& when (@is-gray) and (@rgb < 128)
		{
			result: tint(@bg-color, 10%);
		}
		& when not (@is-gray)
		{
			result: spin(desaturate(@bg-color, 25%), 10);
		}
	}
}
