#ui()
{
	.button(@bg-color,
		@color: @button-color,
		@hover: @button-hover-color-bg,
		@font-size: @button-font-size,
		@pad-v: @button-padding-ver,
		@pad-h: @button-padding-hor,
		@border-w: @button-border-width)
	{
		@hover-color:  #ui-button.hover-bg(@hover, @bg-color)[result];
		@active-color: #ui-button.active-bg(@hover-color)[result];

		#ui-button.template(@font-size, @pad-v, @pad-h, @border-w);

		&
		{
			background-color: @bg-color;
			color: @color;
		}
		&:hover
		{
			background-color: @hover-color;
		}
		&:active
		{
			background-color: @active-color;
		}
		&:disabled
		{
			background-color: @bg-color !important;
			color:   @color !important;
			opacity: @button-disabled-opacity !important;
			cursor:  @button-disabled-cursor;
		}


		#ui-button.sizes(@font-size);

		.round(@prefix: @button-class-prefix)
		{
			&.@{prefix}round
			{
				border-radius: 150px;
			}
		}
		.thin(@prefix: @button-class-prefix)
		{
			&.@{prefix}thin
			{
				padding-left:  @pad-v;
				padding-right: @pad-v;
			}
		}
		.circle(@prefix: @button-class-prefix)
		{
			&.@{prefix}circle
			{
				border-radius: 150px;
				padding-left:  @pad-v;
				padding-right: @pad-v;
			}
		}

		.outline(@prefix: @button-class-prefix)
		{
			&.@{prefix}outline
			{
				color: @bg-color;
				border-color: @bg-color;
				background-color: transparent;

				&:hover
				{
					color: @color;
					border-color: @hover-color;
					background-color: @hover-color;
				}
				&:active
				{
					border-color: @active-color;
					background-color: @active-color;
				}
			}
		}
		.fount(@prefix: @button-class-prefix)
		{
			&.@{prefix}fount
			{
				border-color: fade(@color, alpha(@color) / 2 * 100);
				background-color: transparent;

				&:hover
				{
					border-color: @hover-color;
					background-color: @hover-color;
				}
				&:active
				{
					border-color: @active-color;
					background-color: @active-color;
				}
			}
		}
		.ghost(@prefix: @button-class-prefix)
		{
			&.@{prefix}ghost
			{
				border-color: fade(@color, alpha(@color) / 2 * 100);
				background-color: transparent;

				&:hover
				{
					color: @hover-color;
					border-color: @hover-color;
				}
				&:active
				{
					color: @active-color;
					border-color: @active-color;
				}
			}
		}

		.loading(@prefix: @button-class-prefix)
		{
			&.@{prefix}loading
			{
				-webkit-text-fill-color: transparent;

				&::after
				{
					content: '';
					// fix disproportions of width and height due to sub-pixel rounding bug
					display: table;
					position: absolute;
					z-index: 10;
					top:  50%;
					left: 50%;
					width:  auto;
					height: auto;
					width:  1.24em;
					height: 1.24em;
					margin-top:  -0.62em;
					margin-left: -0.62em;
					border-radius: 150px;
					border-width: 0.1837em;
					border-style: solid;
					border-color: currentColor transparent transparent currentColor;
					animation: rotateRight 1s infinite linear;
				}
			}
		}
	}
}


// Button template
// --------------------------------------------------

#ui-button()
{
	.template(@font-size, @padding-ver, @padding-hor, @border-width)
	{
		min-width:  calc(2 * @padding-ver + 2 * @border-width + 1em * @button-line-height);
		min-height: calc(2 * @padding-ver + 2 * @border-width + 1em * @button-line-height);
		padding:      @padding-ver @padding-hor;
		font-size:    @font-size;
		border-width: @border-width;
	}
	.template(...)
	{
		margin:         @button-margin;
		line-height:    @button-line-height;
		text-transform: @button-text-transform;
		border-radius:  @button-radius;
		border-style:   @button-border-style;

		display: inline-block;
		position: relative;
		overflow: hidden;
		vertical-align: middle;
		font-style: normal;
		text-align: center;
		text-decoration: none;
		border-color: transparent;
		background-clip: border-box;
		cursor: pointer;
		user-select: none;
		appearance: none;
		transition: color 0.1s cubic-bezier(0, 0, 0.2, 1),
					border-color 0.1s cubic-bezier(0, 0, 0.2, 1),
					background-color 0.2s cubic-bezier(0.25,0.8,0.25,1);

		// remove text-decoration for links
		&:hover
		{
			text-decoration: none;
		}
	}


	.sizes(@font-size)
	{
		#ui.fs-sizes(@font-size);

		.size-nano( @prefix: @button-class-prefix) { &.@{prefix}nano  { font-size: @size-nano;  }}
		.size-mini( @prefix: @button-class-prefix) { &.@{prefix}mini  { font-size: @size-mini;  }}
		.size-tiny( @prefix: @button-class-prefix) { &.@{prefix}tiny  { font-size: @size-tiny;  }}
		.size-small(@prefix: @button-class-prefix) { &.@{prefix}small { font-size: @size-small; }}

		.size-big(  @prefix: @button-class-prefix) { &.@{prefix}big   { font-size: @size-big;   }}
		.size-large(@prefix: @button-class-prefix) { &.@{prefix}large { font-size: @size-large; }}
		.size-huge( @prefix: @button-class-prefix) { &.@{prefix}huge  { font-size: @size-huge;  }}
		.size-great(@prefix: @button-class-prefix) { &.@{prefix}great { font-size: @size-great; }}

		.size-apply(@prefix: @button-class-prefix)
		{
			.size-nano( @prefix);
			.size-mini( @prefix);
			.size-tiny( @prefix);
			.size-small(@prefix);

			.size-big(  @prefix);
			.size-large(@prefix);
			.size-huge( @prefix);
			.size-great(@prefix);
		}
	}


	.hover-bg(@hover-color, @bg-color) when (iscolor(@hover-color))
	{
		result: @hover-color;
	}
	.hover-bg(@hover-color, @bg-color) when not (iscolor(@hover-color))
	{
		@is-transparent: if(@bg-color = transparent, true, false);
		@is-white: if((red(@bg-color) = 255) and (green(@bg-color) = 255) and (blue(@bg-color) = 255), true, false);
		@is-black: if((red(@bg-color) = 0)   and (green(@bg-color) = 0)   and (blue(@bg-color) = 0),   true, false);

		& when (@is-white), (@is-transparent)
		{
			result: shade(@bg-color, 10%);
		}
		& when (@is-black) and not (@is-transparent)
		{
			result: tint(@bg-color, 20%);
		}

		& when not (@is-white) and not (@is-black) and not (@is-transparent)
		{
			& when (@hover-color = default)
			{
				result: spin(saturate(@bg-color, 20%), 10);
			}
			& when (@hover-color = dark)
			{
				result: shade(@bg-color, 20%);
			}
			& when (@hover-color = darken)
			{
				result: darken(@bg-color, 15%);
			}
			& when (@hover-color = light)
			{
				result: tint(@bg-color, 20%);
			}
			& when (@hover-color = lighten)
			{
				result: lighten(@bg-color, 15%);
			}
		}
	}

	.active-bg(@bg-color)
	{
		@rgb: red(@bg-color);
		@is-gray: if(@rgb = green(@bg-color) and @rgb = blue(@bg-color), true, false);

		& when (@is-gray) and (@rgb >= 128)
		{
			result: shade(@bg-color, 5%);
		}
		& when (@is-gray) and (@rgb < 128)
		{
			result: tint(@bg-color, 10%);
		}
		& when not (@is-gray)
		{
			result: spin(desaturate(@bg-color, 25%), 10);
		}
	}
}
